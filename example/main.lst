   1               		.file	"main.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               		.section	.rodata.str1.1,"aMS",@progbits,1
  11               	.LC0:
  12 0000 534D 414C 		.string	"SMALL PIZZA"
  12      4C20 5049 
  12      5A5A 4100 
  13               	.LC1:
  14 000c 4841 5320 		.string	"HAS SELECTED"
  14      5345 4C45 
  14      4354 4544 
  14      00
  15               		.text
  16               	.global	FoodPizzaSmall_cb
  18               	FoodPizzaSmall_cb:
  19               	.LFB10:
  20               		.file 1 "main.c"
   1:main.c        **** /* BISMILLAH			
   2:main.c        ****  * An example of using CharMenu
   3:main.c        ****  * CharMenu was released under LGPL licensee copyright (c) 2014-2015 Izzulmakin
   4:main.c        ****  * lcd_lib was released under GPL licensee copyright(c) scienceprog 
   5:main.c        **** */
   6:main.c        **** #include <stdlib.h>
   7:main.c        **** #include <stdio.h>
   8:main.c        **** #include <avr/io.h>
   9:main.c        **** #include <util/delay.h>
  10:main.c        **** #include <avr/pgmspace.h>
  11:main.c        **** #include "lcd_lib.h"
  12:main.c        **** #include <avr/eeprom.h>
  13:main.c        **** #include "CharMenu.h"
  14:main.c        **** 
  15:main.c        **** #define STATE_MENU				0
  16:main.c        **** #define STATE_FOOD_MENU			1
  17:main.c        **** #define STATE_FOOD_PIZZA_MENU	2
  18:main.c        **** #define STATE_FOOD_PIZZA_SMALL	3
  19:main.c        **** #define STATE_FOOD_PIZZA_BIG	4
  20:main.c        **** #define STATE_FOOD_KEBAB_MENU	5
  21:main.c        **** #define STATE_FOOD_KEBAB_SMALL	6
  22:main.c        **** #define STATE_FOOD_KEBAB_BIG	7
  23:main.c        **** #define STATE_DRINK_MENU		8
  24:main.c        **** #define STATE_DRINK_COLA		9
  25:main.c        **** #define STATE_DRINK_PEPSI		10	
  26:main.c        **** 
  27:main.c        **** void init(void);
  28:main.c        **** void FoodPizzaSmall_cb(void);
  29:main.c        **** void FoodPizzaBig_cb(void);
  30:main.c        **** void FoodKebabSmall_cb(void);
  31:main.c        **** void FoodKebabBig_cb(void);
  32:main.c        **** void DrinkCola_cb(void);
  33:main.c        **** void DrinkPepsi_cb(void);
  34:main.c        **** 
  35:main.c        **** int main(void)
  36:main.c        **** {
  37:main.c        **** 	LCDinit();
  38:main.c        **** 	LCDGotoXY(0,0);
  39:main.c        **** 	LCDstring("HAHA",4);
  40:main.c        **** 	LCDGotoXY(0,1);
  41:main.c        **** 	LCDprogressBar(7,40,16);
  42:main.c        **** 	_delay_ms(2000);
  43:main.c        **** 	Init();
  44:main.c        **** 	CharMenuInit();
  45:main.c        **** 	gCursor = 1;
  46:main.c        **** 	gState = STATE_MENU;
  47:main.c        **** 	
  48:main.c        **** 	while(1)
  49:main.c        **** 	{
  50:main.c        **** 		CharMenuDraw();
  51:main.c        **** 	}
  52:main.c        **** }
  53:main.c        **** 
  54:main.c        **** 
  55:main.c        **** void Init(void)
  56:main.c        **** {
  57:main.c        **** 	MenuMain[STATE_FOOD_MENU].cursorNum = 1;
  58:main.c        **** 	MenuMain[STATE_FOOD_MENU].menuText = (uint8_t*)"Food            ";
  59:main.c        **** 	MenuMain[STATE_FOOD_MENU].numOfChildren = 2;
  60:main.c        **** 	MenuMain[STATE_FOOD_MENU].parentIndex = STATE_MENU;
  61:main.c        **** 	
  62:main.c        **** 	MenuMain[STATE_FOOD_PIZZA_MENU].cursorNum = 1;
  63:main.c        **** 	MenuMain[STATE_FOOD_PIZZA_MENU].menuText = (uint8_t*)"Pizza           ";
  64:main.c        **** 	MenuMain[STATE_FOOD_PIZZA_MENU].numOfChildren = 2;
  65:main.c        **** 	MenuMain[STATE_FOOD_PIZZA_MENU].parentIndex = STATE_FOOD_MENU;
  66:main.c        **** 	
  67:main.c        **** 	MenuMain[STATE_FOOD_PIZZA_SMALL].cursorNum = 1;
  68:main.c        **** 	MenuMain[STATE_FOOD_PIZZA_SMALL].menuText = (uint8_t*)"Pizza Small     ";
  69:main.c        **** 	MenuMain[STATE_FOOD_PIZZA_SMALL].numOfChildren = 0;
  70:main.c        **** 	MenuMain[STATE_FOOD_PIZZA_SMALL].parentIndex = STATE_FOOD_PIZZA_MENU;
  71:main.c        **** 	MenuMain[STATE_FOOD_PIZZA_SMALL].actFunction = &FoodPizzaSmall_cb;
  72:main.c        **** 	
  73:main.c        **** 	MenuMain[STATE_FOOD_PIZZA_BIG].cursorNum = 2;
  74:main.c        **** 	MenuMain[STATE_FOOD_PIZZA_BIG].menuText = (uint8_t*)"Pizza Big       ";
  75:main.c        **** 	MenuMain[STATE_FOOD_PIZZA_BIG].numOfChildren = 0;
  76:main.c        **** 	MenuMain[STATE_FOOD_PIZZA_BIG].parentIndex = STATE_FOOD_PIZZA_MENU;
  77:main.c        **** 	MenuMain[STATE_FOOD_PIZZA_BIG].actFunction = &FoodPizzaBig_cb;
  78:main.c        **** 	
  79:main.c        **** 	
  80:main.c        **** 	MenuMain[STATE_FOOD_KEBAB_MENU].cursorNum = 2;
  81:main.c        **** 	MenuMain[STATE_FOOD_KEBAB_MENU].menuText = (uint8_t*)"Kebab           ";
  82:main.c        **** 	MenuMain[STATE_FOOD_KEBAB_MENU].numOfChildren = 2;
  83:main.c        **** 	MenuMain[STATE_FOOD_KEBAB_MENU].parentIndex = STATE_FOOD_MENU;
  84:main.c        **** 	
  85:main.c        **** 	MenuMain[STATE_FOOD_KEBAB_SMALL].cursorNum = 1;
  86:main.c        **** 	MenuMain[STATE_FOOD_KEBAB_SMALL].menuText = (uint8_t*)"Kebab Small     ";
  87:main.c        **** 	MenuMain[STATE_FOOD_KEBAB_SMALL].numOfChildren = 0;
  88:main.c        **** 	MenuMain[STATE_FOOD_KEBAB_SMALL].parentIndex = STATE_FOOD_KEBAB_MENU;
  89:main.c        **** 	MenuMain[STATE_FOOD_KEBAB_SMALL].actFunction = &FoodKebabSmall_cb;
  90:main.c        **** 	
  91:main.c        **** 	MenuMain[STATE_FOOD_KEBAB_BIG].cursorNum = 2;
  92:main.c        **** 	MenuMain[STATE_FOOD_KEBAB_BIG].menuText = (uint8_t*)"Kebab Big       ";
  93:main.c        **** 	MenuMain[STATE_FOOD_KEBAB_BIG].numOfChildren = 0;
  94:main.c        **** 	MenuMain[STATE_FOOD_KEBAB_BIG].parentIndex = STATE_FOOD_KEBAB_MENU;
  95:main.c        **** 	MenuMain[STATE_FOOD_KEBAB_BIG].actFunction = &FoodKebabBig_cb;
  96:main.c        **** 	
  97:main.c        **** 	
  98:main.c        **** 	MenuMain[STATE_DRINK_MENU].cursorNum = 2;
  99:main.c        **** 	MenuMain[STATE_DRINK_MENU].menuText = (uint8_t*)"Drink           ";
 100:main.c        **** 	MenuMain[STATE_DRINK_MENU].numOfChildren = 2;
 101:main.c        **** 	MenuMain[STATE_DRINK_MENU].parentIndex = STATE_MENU;
 102:main.c        **** 	
 103:main.c        **** 	MenuMain[STATE_DRINK_COLA].cursorNum = 1;
 104:main.c        **** 	MenuMain[STATE_DRINK_COLA].menuText = (uint8_t*)"Cola            ";
 105:main.c        **** 	MenuMain[STATE_DRINK_COLA].numOfChildren = 0;
 106:main.c        **** 	MenuMain[STATE_DRINK_COLA].parentIndex = STATE_DRINK_MENU;
 107:main.c        **** 	MenuMain[STATE_DRINK_COLA].actFunction = &DrinkCola_cb;
 108:main.c        **** 	
 109:main.c        **** 	MenuMain[STATE_DRINK_PEPSI].cursorNum = 2;
 110:main.c        **** 	MenuMain[STATE_DRINK_PEPSI].menuText = (uint8_t*)"Pepsi           ";
 111:main.c        **** 	MenuMain[STATE_DRINK_PEPSI].numOfChildren = 0;
 112:main.c        **** 	MenuMain[STATE_DRINK_PEPSI].parentIndex = STATE_DRINK_MENU;
 113:main.c        **** 	MenuMain[STATE_DRINK_PEPSI].actFunction = &DrinkPepsi_cb;
 114:main.c        **** 	
 115:main.c        **** 	
 116:main.c        **** }
 117:main.c        **** 
 118:main.c        **** 
 119:main.c        **** void FoodPizzaSmall_cb(void)
 120:main.c        **** {
  21               		.loc 1 120 0
  22               		.cfi_startproc
  23               	/* prologue: function */
  24               	/* frame size = 0 */
  25               	/* stack size = 0 */
  26               	.L__stack_usage = 0
 121:main.c        **** 	LCDclr();
  27               		.loc 1 121 0
  28 0000 0E94 0000 		call LCDclr
  29               	.LVL0:
 122:main.c        **** 	LCDGotoXY(0,0);
  30               		.loc 1 122 0
  31 0004 60E0      		ldi r22,0
  32 0006 80E0      		ldi r24,0
  33 0008 0E94 0000 		call LCDGotoXY
  34               	.LVL1:
 123:main.c        **** 	LCDstring((uint8_t*)"SMALL PIZZA",11);
  35               		.loc 1 123 0
  36 000c 6BE0      		ldi r22,lo8(11)
  37 000e 80E0      		ldi r24,lo8(.LC0)
  38 0010 90E0      		ldi r25,hi8(.LC0)
  39 0012 0E94 0000 		call LCDstring
  40               	.LVL2:
 124:main.c        **** 	LCDGotoXY(0,1);
  41               		.loc 1 124 0
  42 0016 61E0      		ldi r22,lo8(1)
  43 0018 80E0      		ldi r24,0
  44 001a 0E94 0000 		call LCDGotoXY
  45               	.LVL3:
 125:main.c        **** 	LCDstring((uint8_t*)"HAS SELECTED",12);
  46               		.loc 1 125 0
  47 001e 6CE0      		ldi r22,lo8(12)
  48 0020 80E0      		ldi r24,lo8(.LC1)
  49 0022 90E0      		ldi r25,hi8(.LC1)
  50 0024 0E94 0000 		call LCDstring
  51               	.LVL4:
  52               	.LBB16:
  53               	.LBB17:
  54               		.file 2 "/usr/lib/avr/include/util/delay.h"
   1:/usr/lib/avr/include/util/delay.h **** /* Copyright (c) 2002, Marek Michalkiewicz
   2:/usr/lib/avr/include/util/delay.h ****    Copyright (c) 2004,2005,2007 Joerg Wunsch
   3:/usr/lib/avr/include/util/delay.h ****    Copyright (c) 2007  Florin-Viorel Petrov
   4:/usr/lib/avr/include/util/delay.h ****    All rights reserved.
   5:/usr/lib/avr/include/util/delay.h **** 
   6:/usr/lib/avr/include/util/delay.h ****    Redistribution and use in source and binary forms, with or without
   7:/usr/lib/avr/include/util/delay.h ****    modification, are permitted provided that the following conditions are met:
   8:/usr/lib/avr/include/util/delay.h **** 
   9:/usr/lib/avr/include/util/delay.h ****    * Redistributions of source code must retain the above copyright
  10:/usr/lib/avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer.
  11:/usr/lib/avr/include/util/delay.h **** 
  12:/usr/lib/avr/include/util/delay.h ****    * Redistributions in binary form must reproduce the above copyright
  13:/usr/lib/avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer in
  14:/usr/lib/avr/include/util/delay.h ****      the documentation and/or other materials provided with the
  15:/usr/lib/avr/include/util/delay.h ****      distribution.
  16:/usr/lib/avr/include/util/delay.h **** 
  17:/usr/lib/avr/include/util/delay.h ****    * Neither the name of the copyright holders nor the names of
  18:/usr/lib/avr/include/util/delay.h ****      contributors may be used to endorse or promote products derived
  19:/usr/lib/avr/include/util/delay.h ****      from this software without specific prior written permission.
  20:/usr/lib/avr/include/util/delay.h **** 
  21:/usr/lib/avr/include/util/delay.h ****   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  22:/usr/lib/avr/include/util/delay.h ****   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  23:/usr/lib/avr/include/util/delay.h ****   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  24:/usr/lib/avr/include/util/delay.h ****   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  25:/usr/lib/avr/include/util/delay.h ****   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  26:/usr/lib/avr/include/util/delay.h ****   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  27:/usr/lib/avr/include/util/delay.h ****   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  28:/usr/lib/avr/include/util/delay.h ****   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  29:/usr/lib/avr/include/util/delay.h ****   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  30:/usr/lib/avr/include/util/delay.h ****   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  31:/usr/lib/avr/include/util/delay.h ****   POSSIBILITY OF SUCH DAMAGE. */
  32:/usr/lib/avr/include/util/delay.h **** 
  33:/usr/lib/avr/include/util/delay.h **** /* $Id: delay.h.in 2251 2011-09-14 08:20:33Z joerg_wunsch $ */
  34:/usr/lib/avr/include/util/delay.h **** 
  35:/usr/lib/avr/include/util/delay.h **** #ifndef _UTIL_DELAY_H_
  36:/usr/lib/avr/include/util/delay.h **** #define _UTIL_DELAY_H_ 1
  37:/usr/lib/avr/include/util/delay.h **** 
  38:/usr/lib/avr/include/util/delay.h **** #ifndef __HAS_DELAY_CYCLES
  39:/usr/lib/avr/include/util/delay.h **** #define __HAS_DELAY_CYCLES 1
  40:/usr/lib/avr/include/util/delay.h **** #endif
  41:/usr/lib/avr/include/util/delay.h **** 
  42:/usr/lib/avr/include/util/delay.h **** #include <inttypes.h>
  43:/usr/lib/avr/include/util/delay.h **** #include <util/delay_basic.h>
  44:/usr/lib/avr/include/util/delay.h **** #include <math.h>
  45:/usr/lib/avr/include/util/delay.h **** 
  46:/usr/lib/avr/include/util/delay.h **** /** \file */
  47:/usr/lib/avr/include/util/delay.h **** /** \defgroup util_delay <util/delay.h>: Convenience functions for busy-wait delay loops
  48:/usr/lib/avr/include/util/delay.h ****     \code
  49:/usr/lib/avr/include/util/delay.h ****     #define F_CPU 1000000UL  // 1 MHz
  50:/usr/lib/avr/include/util/delay.h ****     //#define F_CPU 14.7456E6
  51:/usr/lib/avr/include/util/delay.h ****     #include <util/delay.h>
  52:/usr/lib/avr/include/util/delay.h ****     \endcode
  53:/usr/lib/avr/include/util/delay.h **** 
  54:/usr/lib/avr/include/util/delay.h ****     \note As an alternative method, it is possible to pass the
  55:/usr/lib/avr/include/util/delay.h ****     F_CPU macro down to the compiler from the Makefile.
  56:/usr/lib/avr/include/util/delay.h ****     Obviously, in that case, no \c \#define statement should be
  57:/usr/lib/avr/include/util/delay.h ****     used.
  58:/usr/lib/avr/include/util/delay.h **** 
  59:/usr/lib/avr/include/util/delay.h ****     The functions in this header file are wrappers around the basic
  60:/usr/lib/avr/include/util/delay.h ****     busy-wait functions from <util/delay_basic.h>.  They are meant as
  61:/usr/lib/avr/include/util/delay.h ****     convenience functions where actual time values can be specified
  62:/usr/lib/avr/include/util/delay.h ****     rather than a number of cycles to wait for.  The idea behind is
  63:/usr/lib/avr/include/util/delay.h ****     that compile-time constant expressions will be eliminated by
  64:/usr/lib/avr/include/util/delay.h ****     compiler optimization so floating-point expressions can be used
  65:/usr/lib/avr/include/util/delay.h ****     to calculate the number of delay cycles needed based on the CPU
  66:/usr/lib/avr/include/util/delay.h ****     frequency passed by the macro F_CPU.
  67:/usr/lib/avr/include/util/delay.h **** 
  68:/usr/lib/avr/include/util/delay.h ****     \note In order for these functions to work as intended, compiler
  69:/usr/lib/avr/include/util/delay.h ****     optimizations <em>must</em> be enabled, and the delay time
  70:/usr/lib/avr/include/util/delay.h ****     <em>must</em> be an expression that is a known constant at
  71:/usr/lib/avr/include/util/delay.h ****     compile-time.  If these requirements are not met, the resulting
  72:/usr/lib/avr/include/util/delay.h ****     delay will be much longer (and basically unpredictable), and
  73:/usr/lib/avr/include/util/delay.h ****     applications that otherwise do not use floating-point calculations
  74:/usr/lib/avr/include/util/delay.h ****     will experience severe code bloat by the floating-point library
  75:/usr/lib/avr/include/util/delay.h ****     routines linked into the application.
  76:/usr/lib/avr/include/util/delay.h **** 
  77:/usr/lib/avr/include/util/delay.h ****     The functions available allow the specification of microsecond, and
  78:/usr/lib/avr/include/util/delay.h ****     millisecond delays directly, using the application-supplied macro
  79:/usr/lib/avr/include/util/delay.h ****     F_CPU as the CPU clock frequency (in Hertz).
  80:/usr/lib/avr/include/util/delay.h **** 
  81:/usr/lib/avr/include/util/delay.h **** */
  82:/usr/lib/avr/include/util/delay.h **** 
  83:/usr/lib/avr/include/util/delay.h **** #if !defined(__DOXYGEN__)
  84:/usr/lib/avr/include/util/delay.h **** static inline void _delay_us(double __us) __attribute__((always_inline));
  85:/usr/lib/avr/include/util/delay.h **** static inline void _delay_ms(double __ms) __attribute__((always_inline));
  86:/usr/lib/avr/include/util/delay.h **** #endif
  87:/usr/lib/avr/include/util/delay.h **** 
  88:/usr/lib/avr/include/util/delay.h **** #ifndef F_CPU
  89:/usr/lib/avr/include/util/delay.h **** /* prevent compiler error by supplying a default */
  90:/usr/lib/avr/include/util/delay.h **** # warning "F_CPU not defined for <util/delay.h>"
  91:/usr/lib/avr/include/util/delay.h **** # define F_CPU 1000000UL
  92:/usr/lib/avr/include/util/delay.h **** #endif
  93:/usr/lib/avr/include/util/delay.h **** 
  94:/usr/lib/avr/include/util/delay.h **** #ifndef __OPTIMIZE__
  95:/usr/lib/avr/include/util/delay.h **** # warning "Compiler optimizations disabled; functions from <util/delay.h> won't work as designed"
  96:/usr/lib/avr/include/util/delay.h **** #endif
  97:/usr/lib/avr/include/util/delay.h **** 
  98:/usr/lib/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
  99:/usr/lib/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 100:/usr/lib/avr/include/util/delay.h ****   __STDC_HOSTED__
 101:/usr/lib/avr/include/util/delay.h **** #  include <math.h>
 102:/usr/lib/avr/include/util/delay.h **** #endif
 103:/usr/lib/avr/include/util/delay.h **** 
 104:/usr/lib/avr/include/util/delay.h **** /**
 105:/usr/lib/avr/include/util/delay.h ****    \ingroup util_delay
 106:/usr/lib/avr/include/util/delay.h **** 
 107:/usr/lib/avr/include/util/delay.h ****    Perform a delay of \c __ms milliseconds, using _delay_loop_2().
 108:/usr/lib/avr/include/util/delay.h **** 
 109:/usr/lib/avr/include/util/delay.h ****    The macro F_CPU is supposed to be defined to a
 110:/usr/lib/avr/include/util/delay.h ****    constant defining the CPU clock frequency (in Hertz).
 111:/usr/lib/avr/include/util/delay.h **** 
 112:/usr/lib/avr/include/util/delay.h ****    The maximal possible delay is 262.14 ms / F_CPU in MHz.
 113:/usr/lib/avr/include/util/delay.h **** 
 114:/usr/lib/avr/include/util/delay.h ****    When the user request delay which exceed the maximum possible one,
 115:/usr/lib/avr/include/util/delay.h ****    _delay_ms() provides a decreased resolution functionality. In this
 116:/usr/lib/avr/include/util/delay.h ****    mode _delay_ms() will work with a resolution of 1/10 ms, providing
 117:/usr/lib/avr/include/util/delay.h ****    delays up to 6.5535 seconds (independent from CPU frequency).  The
 118:/usr/lib/avr/include/util/delay.h ****    user will not be informed about decreased resolution.
 119:/usr/lib/avr/include/util/delay.h **** 
 120:/usr/lib/avr/include/util/delay.h ****    If the avr-gcc toolchain has __builtin_avr_delay_cycles(unsigned long)
 121:/usr/lib/avr/include/util/delay.h ****    support, maximal possible delay is 4294967.295 ms/ F_CPU in MHz. For
 122:/usr/lib/avr/include/util/delay.h ****    values greater than the maximal possible delay, overflows results in
 123:/usr/lib/avr/include/util/delay.h ****    no delay i.e., 0ms.
 124:/usr/lib/avr/include/util/delay.h **** 
 125:/usr/lib/avr/include/util/delay.h ****    Conversion of __us into clock cycles may not always result in integer.
 126:/usr/lib/avr/include/util/delay.h ****    By default, the clock cycles rounded up to next integer. This ensures that
 127:/usr/lib/avr/include/util/delay.h ****    the user gets atleast __us microseconds of delay.
 128:/usr/lib/avr/include/util/delay.h **** 
 129:/usr/lib/avr/include/util/delay.h ****    Alternatively, user can define __DELAY_ROUND_DOWN__ and __DELAY_ROUND_CLOSEST__
 130:/usr/lib/avr/include/util/delay.h ****    to round down and round to closest integer.
 131:/usr/lib/avr/include/util/delay.h **** 
 132:/usr/lib/avr/include/util/delay.h ****    Note: The new implementation of _delay_ms(double __ms) with 
 133:/usr/lib/avr/include/util/delay.h ****     __builtin_avr_delay_cycles(unsigned long) support is not backward compatible. 
 134:/usr/lib/avr/include/util/delay.h ****    User can define __DELAY_BACKWARD_COMPATIBLE__ to get a backward compatible delay.
 135:/usr/lib/avr/include/util/delay.h ****    Also, the backward compatible
 136:/usr/lib/avr/include/util/delay.h ****    algorithm will be chosen if the code is compiled in a <em>freestanding
 137:/usr/lib/avr/include/util/delay.h ****    environment</em> (GCC option \c -ffreestanding), as the math functions
 138:/usr/lib/avr/include/util/delay.h ****    required for rounding are not available to the compiler then.
 139:/usr/lib/avr/include/util/delay.h **** 
 140:/usr/lib/avr/include/util/delay.h ****  */
 141:/usr/lib/avr/include/util/delay.h **** void
 142:/usr/lib/avr/include/util/delay.h **** _delay_ms(double __ms)
 143:/usr/lib/avr/include/util/delay.h **** {
 144:/usr/lib/avr/include/util/delay.h **** 	uint16_t __ticks;
 145:/usr/lib/avr/include/util/delay.h **** 	double __tmp ; 
 146:/usr/lib/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 147:/usr/lib/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 148:/usr/lib/avr/include/util/delay.h ****   __STDC_HOSTED__
 149:/usr/lib/avr/include/util/delay.h **** 	uint32_t __ticks_dc;
 150:/usr/lib/avr/include/util/delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 151:/usr/lib/avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 1e3) * __ms;
 152:/usr/lib/avr/include/util/delay.h **** 
 153:/usr/lib/avr/include/util/delay.h **** 	#if defined(__DELAY_ROUND_DOWN__)
 154:/usr/lib/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)fabs(__tmp);
 155:/usr/lib/avr/include/util/delay.h **** 
 156:/usr/lib/avr/include/util/delay.h **** 	#elif defined(__DELAY_ROUND_CLOSEST__)
 157:/usr/lib/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(fabs(__tmp)+0.5);
 158:/usr/lib/avr/include/util/delay.h **** 
 159:/usr/lib/avr/include/util/delay.h **** 	#else
 160:/usr/lib/avr/include/util/delay.h **** 		//round up by default
 161:/usr/lib/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
 162:/usr/lib/avr/include/util/delay.h **** 	#endif
 163:/usr/lib/avr/include/util/delay.h **** 
 164:/usr/lib/avr/include/util/delay.h **** 	__builtin_avr_delay_cycles(__ticks_dc);
  55               		.loc 2 164 0
  56 0028 2FE7      		ldi r18,lo8(1199999)
  57 002a 8FE4      		ldi r24,hi8(1199999)
  58 002c 92E1      		ldi r25,hlo8(1199999)
  59 002e 2150      		1: subi r18,1
  60 0030 8040      		sbci r24,0
  61 0032 9040      		sbci r25,0
  62 0034 01F4      		brne 1b
  63 0036 00C0      		rjmp .
  64 0038 0000      		nop
  65               	.LBE17:
  66               	.LBE16:
 126:main.c        **** 	_delay_ms(500);
 127:main.c        **** 	ButtonWait();
  67               		.loc 1 127 0
  68 003a 0C94 0000 		jmp ButtonWait
  69               	.LVL5:
  70               		.cfi_endproc
  71               	.LFE10:
  73               		.section	.rodata.str1.1
  74               	.LC2:
  75 0019 4249 4720 		.string	"BIG PIZZA"
  75      5049 5A5A 
  75      4100 
  76               		.text
  77               	.global	FoodPizzaBig_cb
  79               	FoodPizzaBig_cb:
  80               	.LFB11:
 128:main.c        **** }
 129:main.c        **** 
 130:main.c        **** void FoodPizzaBig_cb(void)
 131:main.c        **** {
  81               		.loc 1 131 0
  82               		.cfi_startproc
  83               	/* prologue: function */
  84               	/* frame size = 0 */
  85               	/* stack size = 0 */
  86               	.L__stack_usage = 0
 132:main.c        **** 	LCDclr();
  87               		.loc 1 132 0
  88 003e 0E94 0000 		call LCDclr
  89               	.LVL6:
 133:main.c        **** 	LCDGotoXY(0,0);
  90               		.loc 1 133 0
  91 0042 60E0      		ldi r22,0
  92 0044 80E0      		ldi r24,0
  93 0046 0E94 0000 		call LCDGotoXY
  94               	.LVL7:
 134:main.c        **** 	LCDstring((uint8_t*)"BIG PIZZA",9);
  95               		.loc 1 134 0
  96 004a 69E0      		ldi r22,lo8(9)
  97 004c 80E0      		ldi r24,lo8(.LC2)
  98 004e 90E0      		ldi r25,hi8(.LC2)
  99 0050 0E94 0000 		call LCDstring
 100               	.LVL8:
 135:main.c        **** 	LCDGotoXY(0,1);
 101               		.loc 1 135 0
 102 0054 61E0      		ldi r22,lo8(1)
 103 0056 80E0      		ldi r24,0
 104 0058 0E94 0000 		call LCDGotoXY
 105               	.LVL9:
 136:main.c        **** 	LCDstring((uint8_t*)"HAS SELECTED",12);
 106               		.loc 1 136 0
 107 005c 6CE0      		ldi r22,lo8(12)
 108 005e 80E0      		ldi r24,lo8(.LC1)
 109 0060 90E0      		ldi r25,hi8(.LC1)
 110 0062 0E94 0000 		call LCDstring
 111               	.LVL10:
 112               	.LBB18:
 113               	.LBB19:
 114               		.loc 2 164 0
 115 0066 2FE7      		ldi r18,lo8(1199999)
 116 0068 8FE4      		ldi r24,hi8(1199999)
 117 006a 92E1      		ldi r25,hlo8(1199999)
 118 006c 2150      		1: subi r18,1
 119 006e 8040      		sbci r24,0
 120 0070 9040      		sbci r25,0
 121 0072 01F4      		brne 1b
 122 0074 00C0      		rjmp .
 123 0076 0000      		nop
 124               	.LBE19:
 125               	.LBE18:
 137:main.c        **** 	_delay_ms(500);
 138:main.c        **** 	ButtonWait();
 126               		.loc 1 138 0
 127 0078 0C94 0000 		jmp ButtonWait
 128               	.LVL11:
 129               		.cfi_endproc
 130               	.LFE11:
 132               		.section	.rodata.str1.1
 133               	.LC3:
 134 0023 4249 4720 		.string	"BIG KEBAB"
 134      4B45 4241 
 134      4200 
 135               		.text
 136               	.global	FoodKebabBig_cb
 138               	FoodKebabBig_cb:
 139               	.LFB12:
 139:main.c        **** }
 140:main.c        **** void FoodKebabBig_cb(void)
 141:main.c        **** {
 140               		.loc 1 141 0
 141               		.cfi_startproc
 142               	/* prologue: function */
 143               	/* frame size = 0 */
 144               	/* stack size = 0 */
 145               	.L__stack_usage = 0
 142:main.c        **** 	LCDclr();
 146               		.loc 1 142 0
 147 007c 0E94 0000 		call LCDclr
 148               	.LVL12:
 143:main.c        **** 	LCDGotoXY(0,0);
 149               		.loc 1 143 0
 150 0080 60E0      		ldi r22,0
 151 0082 80E0      		ldi r24,0
 152 0084 0E94 0000 		call LCDGotoXY
 153               	.LVL13:
 144:main.c        **** 	LCDstring((uint8_t*)"BIG KEBAB",9);
 154               		.loc 1 144 0
 155 0088 69E0      		ldi r22,lo8(9)
 156 008a 80E0      		ldi r24,lo8(.LC3)
 157 008c 90E0      		ldi r25,hi8(.LC3)
 158 008e 0E94 0000 		call LCDstring
 159               	.LVL14:
 145:main.c        **** 	LCDGotoXY(0,1);
 160               		.loc 1 145 0
 161 0092 61E0      		ldi r22,lo8(1)
 162 0094 80E0      		ldi r24,0
 163 0096 0E94 0000 		call LCDGotoXY
 164               	.LVL15:
 146:main.c        **** 	LCDstring((uint8_t*)"HAS SELECTED",12);
 165               		.loc 1 146 0
 166 009a 6CE0      		ldi r22,lo8(12)
 167 009c 80E0      		ldi r24,lo8(.LC1)
 168 009e 90E0      		ldi r25,hi8(.LC1)
 169 00a0 0E94 0000 		call LCDstring
 170               	.LVL16:
 171               	.LBB20:
 172               	.LBB21:
 173               		.loc 2 164 0
 174 00a4 2FE7      		ldi r18,lo8(1199999)
 175 00a6 8FE4      		ldi r24,hi8(1199999)
 176 00a8 92E1      		ldi r25,hlo8(1199999)
 177 00aa 2150      		1: subi r18,1
 178 00ac 8040      		sbci r24,0
 179 00ae 9040      		sbci r25,0
 180 00b0 01F4      		brne 1b
 181 00b2 00C0      		rjmp .
 182 00b4 0000      		nop
 183               	.LBE21:
 184               	.LBE20:
 147:main.c        **** 	_delay_ms(500);
 148:main.c        **** 	ButtonWait();
 185               		.loc 1 148 0
 186 00b6 0C94 0000 		jmp ButtonWait
 187               	.LVL17:
 188               		.cfi_endproc
 189               	.LFE12:
 191               		.section	.rodata.str1.1
 192               	.LC4:
 193 002d 534D 414C 		.string	"SMALL KEBAB"
 193      4C20 4B45 
 193      4241 4200 
 194               		.text
 195               	.global	FoodKebabSmall_cb
 197               	FoodKebabSmall_cb:
 198               	.LFB13:
 149:main.c        **** }
 150:main.c        **** void FoodKebabSmall_cb(void)
 151:main.c        **** {
 199               		.loc 1 151 0
 200               		.cfi_startproc
 201               	/* prologue: function */
 202               	/* frame size = 0 */
 203               	/* stack size = 0 */
 204               	.L__stack_usage = 0
 152:main.c        **** 	LCDclr();
 205               		.loc 1 152 0
 206 00ba 0E94 0000 		call LCDclr
 207               	.LVL18:
 153:main.c        **** 	LCDGotoXY(0,0);
 208               		.loc 1 153 0
 209 00be 60E0      		ldi r22,0
 210 00c0 80E0      		ldi r24,0
 211 00c2 0E94 0000 		call LCDGotoXY
 212               	.LVL19:
 154:main.c        **** 	LCDstring((uint8_t*)"SMALL KEBAB",11);
 213               		.loc 1 154 0
 214 00c6 6BE0      		ldi r22,lo8(11)
 215 00c8 80E0      		ldi r24,lo8(.LC4)
 216 00ca 90E0      		ldi r25,hi8(.LC4)
 217 00cc 0E94 0000 		call LCDstring
 218               	.LVL20:
 155:main.c        **** 	LCDGotoXY(0,1);
 219               		.loc 1 155 0
 220 00d0 61E0      		ldi r22,lo8(1)
 221 00d2 80E0      		ldi r24,0
 222 00d4 0E94 0000 		call LCDGotoXY
 223               	.LVL21:
 156:main.c        **** 	LCDstring((uint8_t*)"HAS SELECTED",12);
 224               		.loc 1 156 0
 225 00d8 6CE0      		ldi r22,lo8(12)
 226 00da 80E0      		ldi r24,lo8(.LC1)
 227 00dc 90E0      		ldi r25,hi8(.LC1)
 228 00de 0E94 0000 		call LCDstring
 229               	.LVL22:
 230               	.LBB22:
 231               	.LBB23:
 232               		.loc 2 164 0
 233 00e2 2FE7      		ldi r18,lo8(1199999)
 234 00e4 8FE4      		ldi r24,hi8(1199999)
 235 00e6 92E1      		ldi r25,hlo8(1199999)
 236 00e8 2150      		1: subi r18,1
 237 00ea 8040      		sbci r24,0
 238 00ec 9040      		sbci r25,0
 239 00ee 01F4      		brne 1b
 240 00f0 00C0      		rjmp .
 241 00f2 0000      		nop
 242               	.LBE23:
 243               	.LBE22:
 157:main.c        **** 	_delay_ms(500);
 158:main.c        **** 	ButtonWait();
 244               		.loc 1 158 0
 245 00f4 0C94 0000 		jmp ButtonWait
 246               	.LVL23:
 247               		.cfi_endproc
 248               	.LFE13:
 250               		.section	.rodata.str1.1
 251               	.LC5:
 252 0039 434F 4341 		.string	"COCA-COLA"
 252      2D43 4F4C 
 252      4100 
 253               		.text
 254               	.global	DrinkCola_cb
 256               	DrinkCola_cb:
 257               	.LFB14:
 159:main.c        **** }
 160:main.c        **** void DrinkCola_cb(void)
 161:main.c        **** {
 258               		.loc 1 161 0
 259               		.cfi_startproc
 260               	/* prologue: function */
 261               	/* frame size = 0 */
 262               	/* stack size = 0 */
 263               	.L__stack_usage = 0
 162:main.c        **** 	LCDclr();
 264               		.loc 1 162 0
 265 00f8 0E94 0000 		call LCDclr
 266               	.LVL24:
 163:main.c        **** 	LCDGotoXY(0,0);
 267               		.loc 1 163 0
 268 00fc 60E0      		ldi r22,0
 269 00fe 80E0      		ldi r24,0
 270 0100 0E94 0000 		call LCDGotoXY
 271               	.LVL25:
 164:main.c        **** 	LCDstring((uint8_t*)"COCA-COLA",9);
 272               		.loc 1 164 0
 273 0104 69E0      		ldi r22,lo8(9)
 274 0106 80E0      		ldi r24,lo8(.LC5)
 275 0108 90E0      		ldi r25,hi8(.LC5)
 276 010a 0E94 0000 		call LCDstring
 277               	.LVL26:
 165:main.c        **** 	LCDGotoXY(0,1);
 278               		.loc 1 165 0
 279 010e 61E0      		ldi r22,lo8(1)
 280 0110 80E0      		ldi r24,0
 281 0112 0E94 0000 		call LCDGotoXY
 282               	.LVL27:
 166:main.c        **** 	LCDstring((uint8_t*)"HAS SELECTED",12);
 283               		.loc 1 166 0
 284 0116 6CE0      		ldi r22,lo8(12)
 285 0118 80E0      		ldi r24,lo8(.LC1)
 286 011a 90E0      		ldi r25,hi8(.LC1)
 287 011c 0E94 0000 		call LCDstring
 288               	.LVL28:
 289               	.LBB24:
 290               	.LBB25:
 291               		.loc 2 164 0
 292 0120 2FE7      		ldi r18,lo8(1199999)
 293 0122 8FE4      		ldi r24,hi8(1199999)
 294 0124 92E1      		ldi r25,hlo8(1199999)
 295 0126 2150      		1: subi r18,1
 296 0128 8040      		sbci r24,0
 297 012a 9040      		sbci r25,0
 298 012c 01F4      		brne 1b
 299 012e 00C0      		rjmp .
 300 0130 0000      		nop
 301               	.LBE25:
 302               	.LBE24:
 167:main.c        **** 	_delay_ms(500);
 168:main.c        **** 	ButtonWait();
 303               		.loc 1 168 0
 304 0132 0C94 0000 		jmp ButtonWait
 305               	.LVL29:
 306               		.cfi_endproc
 307               	.LFE14:
 309               		.section	.rodata.str1.1
 310               	.LC6:
 311 0043 5045 5053 		.string	"PEPSI"
 311      4900 
 312               		.text
 313               	.global	DrinkPepsi_cb
 315               	DrinkPepsi_cb:
 316               	.LFB15:
 169:main.c        **** }
 170:main.c        **** void DrinkPepsi_cb(void)
 171:main.c        **** {
 317               		.loc 1 171 0
 318               		.cfi_startproc
 319               	/* prologue: function */
 320               	/* frame size = 0 */
 321               	/* stack size = 0 */
 322               	.L__stack_usage = 0
 172:main.c        **** 	LCDclr();
 323               		.loc 1 172 0
 324 0136 0E94 0000 		call LCDclr
 325               	.LVL30:
 173:main.c        **** 	LCDGotoXY(0,0);
 326               		.loc 1 173 0
 327 013a 60E0      		ldi r22,0
 328 013c 80E0      		ldi r24,0
 329 013e 0E94 0000 		call LCDGotoXY
 330               	.LVL31:
 174:main.c        **** 	LCDstring((uint8_t*)"PEPSI",5);
 331               		.loc 1 174 0
 332 0142 65E0      		ldi r22,lo8(5)
 333 0144 80E0      		ldi r24,lo8(.LC6)
 334 0146 90E0      		ldi r25,hi8(.LC6)
 335 0148 0E94 0000 		call LCDstring
 336               	.LVL32:
 175:main.c        **** 	LCDGotoXY(0,1);
 337               		.loc 1 175 0
 338 014c 61E0      		ldi r22,lo8(1)
 339 014e 80E0      		ldi r24,0
 340 0150 0E94 0000 		call LCDGotoXY
 341               	.LVL33:
 176:main.c        **** 	LCDstring((uint8_t*)"HAS SELECTED",12);
 342               		.loc 1 176 0
 343 0154 6CE0      		ldi r22,lo8(12)
 344 0156 80E0      		ldi r24,lo8(.LC1)
 345 0158 90E0      		ldi r25,hi8(.LC1)
 346 015a 0E94 0000 		call LCDstring
 347               	.LVL34:
 348               	.LBB26:
 349               	.LBB27:
 350               		.loc 2 164 0
 351 015e 2FE7      		ldi r18,lo8(1199999)
 352 0160 8FE4      		ldi r24,hi8(1199999)
 353 0162 92E1      		ldi r25,hlo8(1199999)
 354 0164 2150      		1: subi r18,1
 355 0166 8040      		sbci r24,0
 356 0168 9040      		sbci r25,0
 357 016a 01F4      		brne 1b
 358 016c 00C0      		rjmp .
 359 016e 0000      		nop
 360               	.LBE27:
 361               	.LBE26:
 177:main.c        **** 	_delay_ms(500);
 178:main.c        **** 	ButtonWait();
 362               		.loc 1 178 0
 363 0170 0C94 0000 		jmp ButtonWait
 364               	.LVL35:
 365               		.cfi_endproc
 366               	.LFE15:
 368               		.section	.rodata.str1.1
 369               	.LC7:
 370 0049 466F 6F64 		.string	"Food            "
 370      2020 2020 
 370      2020 2020 
 370      2020 2020 
 370      00
 371               	.LC8:
 372 005a 5069 7A7A 		.string	"Pizza           "
 372      6120 2020 
 372      2020 2020 
 372      2020 2020 
 372      00
 373               	.LC9:
 374 006b 5069 7A7A 		.string	"Pizza Small     "
 374      6120 536D 
 374      616C 6C20 
 374      2020 2020 
 374      00
 375               	.LC10:
 376 007c 5069 7A7A 		.string	"Pizza Big       "
 376      6120 4269 
 376      6720 2020 
 376      2020 2020 
 376      00
 377               	.LC11:
 378 008d 4B65 6261 		.string	"Kebab           "
 378      6220 2020 
 378      2020 2020 
 378      2020 2020 
 378      00
 379               	.LC12:
 380 009e 4B65 6261 		.string	"Kebab Small     "
 380      6220 536D 
 380      616C 6C20 
 380      2020 2020 
 380      00
 381               	.LC13:
 382 00af 4B65 6261 		.string	"Kebab Big       "
 382      6220 4269 
 382      6720 2020 
 382      2020 2020 
 382      00
 383               	.LC14:
 384 00c0 4472 696E 		.string	"Drink           "
 384      6B20 2020 
 384      2020 2020 
 384      2020 2020 
 384      00
 385               	.LC15:
 386 00d1 436F 6C61 		.string	"Cola            "
 386      2020 2020 
 386      2020 2020 
 386      2020 2020 
 386      00
 387               	.LC16:
 388 00e2 5065 7073 		.string	"Pepsi           "
 388      6920 2020 
 388      2020 2020 
 388      2020 2020 
 388      00
 389               		.text
 390               	.global	Init
 392               	Init:
 393               	.LFB9:
  56:main.c        **** {
 394               		.loc 1 56 0
 395               		.cfi_startproc
 396               	/* prologue: function */
 397               	/* frame size = 0 */
 398               	/* stack size = 0 */
 399               	.L__stack_usage = 0
  57:main.c        **** 	MenuMain[STATE_FOOD_MENU].cursorNum = 1;
 400               		.loc 1 57 0
 401 0174 21E0      		ldi r18,lo8(1)
 402 0176 30E0      		ldi r19,0
 403 0178 3093 0000 		sts MenuMain+8+1,r19
 404 017c 2093 0000 		sts MenuMain+8,r18
  58:main.c        **** 	MenuMain[STATE_FOOD_MENU].menuText = (uint8_t*)"Food            ";
 405               		.loc 1 58 0
 406 0180 80E0      		ldi r24,lo8(.LC7)
 407 0182 90E0      		ldi r25,hi8(.LC7)
 408 0184 9093 0000 		sts MenuMain+10+1,r25
 409 0188 8093 0000 		sts MenuMain+10,r24
  59:main.c        **** 	MenuMain[STATE_FOOD_MENU].numOfChildren = 2;
 410               		.loc 1 59 0
 411 018c 62E0      		ldi r22,lo8(2)
 412 018e 6093 0000 		sts MenuMain+12,r22
  60:main.c        **** 	MenuMain[STATE_FOOD_MENU].parentIndex = STATE_MENU;
 413               		.loc 1 60 0
 414 0192 1092 0000 		sts MenuMain+13,__zero_reg__
  62:main.c        **** 	MenuMain[STATE_FOOD_PIZZA_MENU].cursorNum = 1;
 415               		.loc 1 62 0
 416 0196 3093 0000 		sts MenuMain+16+1,r19
 417 019a 2093 0000 		sts MenuMain+16,r18
  63:main.c        **** 	MenuMain[STATE_FOOD_PIZZA_MENU].menuText = (uint8_t*)"Pizza           ";
 418               		.loc 1 63 0
 419 019e 80E0      		ldi r24,lo8(.LC8)
 420 01a0 90E0      		ldi r25,hi8(.LC8)
 421 01a2 9093 0000 		sts MenuMain+18+1,r25
 422 01a6 8093 0000 		sts MenuMain+18,r24
  64:main.c        **** 	MenuMain[STATE_FOOD_PIZZA_MENU].numOfChildren = 2;
 423               		.loc 1 64 0
 424 01aa 6093 0000 		sts MenuMain+20,r22
  65:main.c        **** 	MenuMain[STATE_FOOD_PIZZA_MENU].parentIndex = STATE_FOOD_MENU;
 425               		.loc 1 65 0
 426 01ae 71E0      		ldi r23,lo8(1)
 427 01b0 7093 0000 		sts MenuMain+21,r23
  67:main.c        **** 	MenuMain[STATE_FOOD_PIZZA_SMALL].cursorNum = 1;
 428               		.loc 1 67 0
 429 01b4 3093 0000 		sts MenuMain+24+1,r19
 430 01b8 2093 0000 		sts MenuMain+24,r18
  68:main.c        **** 	MenuMain[STATE_FOOD_PIZZA_SMALL].menuText = (uint8_t*)"Pizza Small     ";
 431               		.loc 1 68 0
 432 01bc 80E0      		ldi r24,lo8(.LC9)
 433 01be 90E0      		ldi r25,hi8(.LC9)
 434 01c0 9093 0000 		sts MenuMain+26+1,r25
 435 01c4 8093 0000 		sts MenuMain+26,r24
  69:main.c        **** 	MenuMain[STATE_FOOD_PIZZA_SMALL].numOfChildren = 0;
 436               		.loc 1 69 0
 437 01c8 1092 0000 		sts MenuMain+28,__zero_reg__
  70:main.c        **** 	MenuMain[STATE_FOOD_PIZZA_SMALL].parentIndex = STATE_FOOD_PIZZA_MENU;
 438               		.loc 1 70 0
 439 01cc 6093 0000 		sts MenuMain+29,r22
  71:main.c        **** 	MenuMain[STATE_FOOD_PIZZA_SMALL].actFunction = &FoodPizzaSmall_cb;
 440               		.loc 1 71 0
 441 01d0 80E0      		ldi r24,lo8(gs(FoodPizzaSmall_cb))
 442 01d2 90E0      		ldi r25,hi8(gs(FoodPizzaSmall_cb))
 443 01d4 9093 0000 		sts MenuMain+30+1,r25
 444 01d8 8093 0000 		sts MenuMain+30,r24
  73:main.c        **** 	MenuMain[STATE_FOOD_PIZZA_BIG].cursorNum = 2;
 445               		.loc 1 73 0
 446 01dc 82E0      		ldi r24,lo8(2)
 447 01de 90E0      		ldi r25,0
 448 01e0 9093 0000 		sts MenuMain+32+1,r25
 449 01e4 8093 0000 		sts MenuMain+32,r24
  74:main.c        **** 	MenuMain[STATE_FOOD_PIZZA_BIG].menuText = (uint8_t*)"Pizza Big       ";
 450               		.loc 1 74 0
 451 01e8 40E0      		ldi r20,lo8(.LC10)
 452 01ea 50E0      		ldi r21,hi8(.LC10)
 453 01ec 5093 0000 		sts MenuMain+34+1,r21
 454 01f0 4093 0000 		sts MenuMain+34,r20
  75:main.c        **** 	MenuMain[STATE_FOOD_PIZZA_BIG].numOfChildren = 0;
 455               		.loc 1 75 0
 456 01f4 1092 0000 		sts MenuMain+36,__zero_reg__
  76:main.c        **** 	MenuMain[STATE_FOOD_PIZZA_BIG].parentIndex = STATE_FOOD_PIZZA_MENU;
 457               		.loc 1 76 0
 458 01f8 6093 0000 		sts MenuMain+37,r22
  77:main.c        **** 	MenuMain[STATE_FOOD_PIZZA_BIG].actFunction = &FoodPizzaBig_cb;
 459               		.loc 1 77 0
 460 01fc 40E0      		ldi r20,lo8(gs(FoodPizzaBig_cb))
 461 01fe 50E0      		ldi r21,hi8(gs(FoodPizzaBig_cb))
 462 0200 5093 0000 		sts MenuMain+38+1,r21
 463 0204 4093 0000 		sts MenuMain+38,r20
  80:main.c        **** 	MenuMain[STATE_FOOD_KEBAB_MENU].cursorNum = 2;
 464               		.loc 1 80 0
 465 0208 9093 0000 		sts MenuMain+40+1,r25
 466 020c 8093 0000 		sts MenuMain+40,r24
  81:main.c        **** 	MenuMain[STATE_FOOD_KEBAB_MENU].menuText = (uint8_t*)"Kebab           ";
 467               		.loc 1 81 0
 468 0210 40E0      		ldi r20,lo8(.LC11)
 469 0212 50E0      		ldi r21,hi8(.LC11)
 470 0214 5093 0000 		sts MenuMain+42+1,r21
 471 0218 4093 0000 		sts MenuMain+42,r20
  82:main.c        **** 	MenuMain[STATE_FOOD_KEBAB_MENU].numOfChildren = 2;
 472               		.loc 1 82 0
 473 021c 6093 0000 		sts MenuMain+44,r22
  83:main.c        **** 	MenuMain[STATE_FOOD_KEBAB_MENU].parentIndex = STATE_FOOD_MENU;
 474               		.loc 1 83 0
 475 0220 7093 0000 		sts MenuMain+45,r23
  85:main.c        **** 	MenuMain[STATE_FOOD_KEBAB_SMALL].cursorNum = 1;
 476               		.loc 1 85 0
 477 0224 3093 0000 		sts MenuMain+48+1,r19
 478 0228 2093 0000 		sts MenuMain+48,r18
  86:main.c        **** 	MenuMain[STATE_FOOD_KEBAB_SMALL].menuText = (uint8_t*)"Kebab Small     ";
 479               		.loc 1 86 0
 480 022c 40E0      		ldi r20,lo8(.LC12)
 481 022e 50E0      		ldi r21,hi8(.LC12)
 482 0230 5093 0000 		sts MenuMain+50+1,r21
 483 0234 4093 0000 		sts MenuMain+50,r20
  87:main.c        **** 	MenuMain[STATE_FOOD_KEBAB_SMALL].numOfChildren = 0;
 484               		.loc 1 87 0
 485 0238 1092 0000 		sts MenuMain+52,__zero_reg__
  88:main.c        **** 	MenuMain[STATE_FOOD_KEBAB_SMALL].parentIndex = STATE_FOOD_KEBAB_MENU;
 486               		.loc 1 88 0
 487 023c 75E0      		ldi r23,lo8(5)
 488 023e 7093 0000 		sts MenuMain+53,r23
  89:main.c        **** 	MenuMain[STATE_FOOD_KEBAB_SMALL].actFunction = &FoodKebabSmall_cb;
 489               		.loc 1 89 0
 490 0242 40E0      		ldi r20,lo8(gs(FoodKebabSmall_cb))
 491 0244 50E0      		ldi r21,hi8(gs(FoodKebabSmall_cb))
 492 0246 5093 0000 		sts MenuMain+54+1,r21
 493 024a 4093 0000 		sts MenuMain+54,r20
  91:main.c        **** 	MenuMain[STATE_FOOD_KEBAB_BIG].cursorNum = 2;
 494               		.loc 1 91 0
 495 024e 9093 0000 		sts MenuMain+56+1,r25
 496 0252 8093 0000 		sts MenuMain+56,r24
  92:main.c        **** 	MenuMain[STATE_FOOD_KEBAB_BIG].menuText = (uint8_t*)"Kebab Big       ";
 497               		.loc 1 92 0
 498 0256 40E0      		ldi r20,lo8(.LC13)
 499 0258 50E0      		ldi r21,hi8(.LC13)
 500 025a 5093 0000 		sts MenuMain+58+1,r21
 501 025e 4093 0000 		sts MenuMain+58,r20
  93:main.c        **** 	MenuMain[STATE_FOOD_KEBAB_BIG].numOfChildren = 0;
 502               		.loc 1 93 0
 503 0262 1092 0000 		sts MenuMain+60,__zero_reg__
  94:main.c        **** 	MenuMain[STATE_FOOD_KEBAB_BIG].parentIndex = STATE_FOOD_KEBAB_MENU;
 504               		.loc 1 94 0
 505 0266 7093 0000 		sts MenuMain+61,r23
  95:main.c        **** 	MenuMain[STATE_FOOD_KEBAB_BIG].actFunction = &FoodKebabBig_cb;
 506               		.loc 1 95 0
 507 026a 40E0      		ldi r20,lo8(gs(FoodKebabBig_cb))
 508 026c 50E0      		ldi r21,hi8(gs(FoodKebabBig_cb))
 509 026e 5093 0000 		sts MenuMain+62+1,r21
 510 0272 4093 0000 		sts MenuMain+62,r20
  98:main.c        **** 	MenuMain[STATE_DRINK_MENU].cursorNum = 2;
 511               		.loc 1 98 0
 512 0276 9093 0000 		sts MenuMain+64+1,r25
 513 027a 8093 0000 		sts MenuMain+64,r24
  99:main.c        **** 	MenuMain[STATE_DRINK_MENU].menuText = (uint8_t*)"Drink           ";
 514               		.loc 1 99 0
 515 027e 40E0      		ldi r20,lo8(.LC14)
 516 0280 50E0      		ldi r21,hi8(.LC14)
 517 0282 5093 0000 		sts MenuMain+66+1,r21
 518 0286 4093 0000 		sts MenuMain+66,r20
 100:main.c        **** 	MenuMain[STATE_DRINK_MENU].numOfChildren = 2;
 519               		.loc 1 100 0
 520 028a 6093 0000 		sts MenuMain+68,r22
 101:main.c        **** 	MenuMain[STATE_DRINK_MENU].parentIndex = STATE_MENU;
 521               		.loc 1 101 0
 522 028e 1092 0000 		sts MenuMain+69,__zero_reg__
 103:main.c        **** 	MenuMain[STATE_DRINK_COLA].cursorNum = 1;
 523               		.loc 1 103 0
 524 0292 3093 0000 		sts MenuMain+72+1,r19
 525 0296 2093 0000 		sts MenuMain+72,r18
 104:main.c        **** 	MenuMain[STATE_DRINK_COLA].menuText = (uint8_t*)"Cola            ";
 526               		.loc 1 104 0
 527 029a 20E0      		ldi r18,lo8(.LC15)
 528 029c 30E0      		ldi r19,hi8(.LC15)
 529 029e 3093 0000 		sts MenuMain+74+1,r19
 530 02a2 2093 0000 		sts MenuMain+74,r18
 105:main.c        **** 	MenuMain[STATE_DRINK_COLA].numOfChildren = 0;
 531               		.loc 1 105 0
 532 02a6 1092 0000 		sts MenuMain+76,__zero_reg__
 106:main.c        **** 	MenuMain[STATE_DRINK_COLA].parentIndex = STATE_DRINK_MENU;
 533               		.loc 1 106 0
 534 02aa 48E0      		ldi r20,lo8(8)
 535 02ac 4093 0000 		sts MenuMain+77,r20
 107:main.c        **** 	MenuMain[STATE_DRINK_COLA].actFunction = &DrinkCola_cb;
 536               		.loc 1 107 0
 537 02b0 20E0      		ldi r18,lo8(gs(DrinkCola_cb))
 538 02b2 30E0      		ldi r19,hi8(gs(DrinkCola_cb))
 539 02b4 3093 0000 		sts MenuMain+78+1,r19
 540 02b8 2093 0000 		sts MenuMain+78,r18
 109:main.c        **** 	MenuMain[STATE_DRINK_PEPSI].cursorNum = 2;
 541               		.loc 1 109 0
 542 02bc 9093 0000 		sts MenuMain+80+1,r25
 543 02c0 8093 0000 		sts MenuMain+80,r24
 110:main.c        **** 	MenuMain[STATE_DRINK_PEPSI].menuText = (uint8_t*)"Pepsi           ";
 544               		.loc 1 110 0
 545 02c4 80E0      		ldi r24,lo8(.LC16)
 546 02c6 90E0      		ldi r25,hi8(.LC16)
 547 02c8 9093 0000 		sts MenuMain+82+1,r25
 548 02cc 8093 0000 		sts MenuMain+82,r24
 111:main.c        **** 	MenuMain[STATE_DRINK_PEPSI].numOfChildren = 0;
 549               		.loc 1 111 0
 550 02d0 1092 0000 		sts MenuMain+84,__zero_reg__
 112:main.c        **** 	MenuMain[STATE_DRINK_PEPSI].parentIndex = STATE_DRINK_MENU;
 551               		.loc 1 112 0
 552 02d4 4093 0000 		sts MenuMain+85,r20
 113:main.c        **** 	MenuMain[STATE_DRINK_PEPSI].actFunction = &DrinkPepsi_cb;
 553               		.loc 1 113 0
 554 02d8 80E0      		ldi r24,lo8(gs(DrinkPepsi_cb))
 555 02da 90E0      		ldi r25,hi8(gs(DrinkPepsi_cb))
 556 02dc 9093 0000 		sts MenuMain+86+1,r25
 557 02e0 8093 0000 		sts MenuMain+86,r24
 558 02e4 0895      		ret
 559               		.cfi_endproc
 560               	.LFE9:
 562               		.section	.rodata.str1.1
 563               	.LC17:
 564 00f3 4841 4841 		.string	"HAHA"
 564      00
 565               		.section	.text.startup,"ax",@progbits
 566               	.global	main
 568               	main:
 569               	.LFB8:
  36:main.c        **** {
 570               		.loc 1 36 0
 571               		.cfi_startproc
 572               	/* prologue: function */
 573               	/* frame size = 0 */
 574               	/* stack size = 0 */
 575               	.L__stack_usage = 0
  37:main.c        **** 	LCDinit();
 576               		.loc 1 37 0
 577 0000 0E94 0000 		call LCDinit
 578               	.LVL36:
  38:main.c        **** 	LCDGotoXY(0,0);
 579               		.loc 1 38 0
 580 0004 60E0      		ldi r22,0
 581 0006 80E0      		ldi r24,0
 582 0008 0E94 0000 		call LCDGotoXY
 583               	.LVL37:
  39:main.c        **** 	LCDstring("HAHA",4);
 584               		.loc 1 39 0
 585 000c 64E0      		ldi r22,lo8(4)
 586 000e 80E0      		ldi r24,lo8(.LC17)
 587 0010 90E0      		ldi r25,hi8(.LC17)
 588 0012 0E94 0000 		call LCDstring
 589               	.LVL38:
  40:main.c        **** 	LCDGotoXY(0,1);
 590               		.loc 1 40 0
 591 0016 61E0      		ldi r22,lo8(1)
 592 0018 80E0      		ldi r24,0
 593 001a 0E94 0000 		call LCDGotoXY
 594               	.LVL39:
  41:main.c        **** 	LCDprogressBar(7,40,16);
 595               		.loc 1 41 0
 596 001e 40E1      		ldi r20,lo8(16)
 597 0020 68E2      		ldi r22,lo8(40)
 598 0022 87E0      		ldi r24,lo8(7)
 599 0024 0E94 0000 		call LCDprogressBar
 600               	.LVL40:
 601               	.LBB28:
 602               	.LBB29:
 603               		.loc 2 164 0
 604 0028 2FEF      		ldi r18,lo8(4799999)
 605 002a 8DE3      		ldi r24,hi8(4799999)
 606 002c 99E4      		ldi r25,hlo8(4799999)
 607 002e 2150      		1: subi r18,1
 608 0030 8040      		sbci r24,0
 609 0032 9040      		sbci r25,0
 610 0034 01F4      		brne 1b
 611 0036 00C0      		rjmp .
 612 0038 0000      		nop
 613               	.LBE29:
 614               	.LBE28:
  43:main.c        **** 	Init();
 615               		.loc 1 43 0
 616 003a 0E94 0000 		call Init
 617               	.LVL41:
  44:main.c        **** 	CharMenuInit();
 618               		.loc 1 44 0
 619 003e 0E94 0000 		call CharMenuInit
 620               	.LVL42:
  45:main.c        **** 	gCursor = 1;
 621               		.loc 1 45 0
 622 0042 81E0      		ldi r24,lo8(1)
 623 0044 8093 0000 		sts gCursor,r24
  46:main.c        **** 	gState = STATE_MENU;
 624               		.loc 1 46 0
 625 0048 1092 0000 		sts gState+1,__zero_reg__
 626 004c 1092 0000 		sts gState,__zero_reg__
 627               	.L9:
  50:main.c        **** 		CharMenuDraw();
 628               		.loc 1 50 0 discriminator 1
 629 0050 0E94 0000 		call CharMenuDraw
 630               	.LVL43:
 631 0054 00C0      		rjmp .L9
 632               		.cfi_endproc
 633               	.LFE8:
 635               		.comm	MenuMain,88,1
 636               		.comm	gScrollMax,1,1
 637               		.comm	gCursor,1,1
 638               		.comm	gState,2,1
 639               		.text
 640               	.Letext0:
 641               		.file 3 "/usr/lib/avr/include/stdint.h"
 642               		.file 4 "CharMenu.h"
 643               		.file 5 "lcd_lib.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 main.c
     /tmp/ccensLUX.s:2      *ABS*:000000000000003e __SP_H__
     /tmp/ccensLUX.s:3      *ABS*:000000000000003d __SP_L__
     /tmp/ccensLUX.s:4      *ABS*:000000000000003f __SREG__
     /tmp/ccensLUX.s:5      *ABS*:0000000000000000 __tmp_reg__
     /tmp/ccensLUX.s:6      *ABS*:0000000000000001 __zero_reg__
     /tmp/ccensLUX.s:18     .text:0000000000000000 FoodPizzaSmall_cb
     /tmp/ccensLUX.s:79     .text:000000000000003e FoodPizzaBig_cb
     /tmp/ccensLUX.s:138    .text:000000000000007c FoodKebabBig_cb
     /tmp/ccensLUX.s:197    .text:00000000000000ba FoodKebabSmall_cb
     /tmp/ccensLUX.s:256    .text:00000000000000f8 DrinkCola_cb
     /tmp/ccensLUX.s:315    .text:0000000000000136 DrinkPepsi_cb
     /tmp/ccensLUX.s:392    .text:0000000000000174 Init
                            *COM*:0000000000000058 MenuMain
     /tmp/ccensLUX.s:568    .text.startup:0000000000000000 main
                            *COM*:0000000000000001 gCursor
                            *COM*:0000000000000002 gState
                            *COM*:0000000000000001 gScrollMax

UNDEFINED SYMBOLS
LCDclr
LCDGotoXY
LCDstring
ButtonWait
LCDinit
LCDprogressBar
CharMenuInit
CharMenuDraw
__do_copy_data
__do_clear_bss
