
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000011a0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000fc  00800060  000011a0  00001234  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000005c  0080015c  0080015c  00001330  2**0
                  ALLOC
  3 .stab         00002100  00000000  00000000  00001330  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000fdf  00000000  00000000  00003430  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  0000440f  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000068  00000000  00000000  00004420  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001b98  00000000  00000000  00004488  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000065e  00000000  00000000  00006020  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000537  00000000  00000000  0000667e  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000004a4  00000000  00000000  00006bb8  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000004da  00000000  00000000  0000705c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000e3b  00000000  00000000  00007536  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000018  00000000  00000000  00008371  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 4a 00 	jmp	0x94	; 0x94 <__ctors_end>
       4:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
       8:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
       c:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      10:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      14:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      18:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      1c:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      20:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      24:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      28:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      2c:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      30:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      34:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      38:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      3c:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      40:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      44:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      48:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      4c:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      50:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>

00000054 <LcdCustomChar>:
      54:	00 1f 00 00 00 00 1f 00 00 1f 10 10 10 10 1f 00     ................
      64:	00 1f 18 18 18 18 1f 00 00 1f 1c 1c 1c 1c 1f 00     ................
      74:	00 1f 1e 1e 1e 1e 1f 00 00 1f 1f 1f 1f 1f 1f 00     ................
      84:	03 07 0f 1f 0f 07 03 00 18 1c 1e 1f 1e 1c 18 00     ................

00000094 <__ctors_end>:
      94:	11 24       	eor	r1, r1
      96:	1f be       	out	0x3f, r1	; 63
      98:	cf e5       	ldi	r28, 0x5F	; 95
      9a:	d8 e0       	ldi	r29, 0x08	; 8
      9c:	de bf       	out	0x3e, r29	; 62
      9e:	cd bf       	out	0x3d, r28	; 61

000000a0 <__do_copy_data>:
      a0:	11 e0       	ldi	r17, 0x01	; 1
      a2:	a0 e6       	ldi	r26, 0x60	; 96
      a4:	b0 e0       	ldi	r27, 0x00	; 0
      a6:	e0 ea       	ldi	r30, 0xA0	; 160
      a8:	f1 e1       	ldi	r31, 0x11	; 17
      aa:	02 c0       	rjmp	.+4      	; 0xb0 <__do_copy_data+0x10>
      ac:	05 90       	lpm	r0, Z+
      ae:	0d 92       	st	X+, r0
      b0:	ac 35       	cpi	r26, 0x5C	; 92
      b2:	b1 07       	cpc	r27, r17
      b4:	d9 f7       	brne	.-10     	; 0xac <__do_copy_data+0xc>

000000b6 <__do_clear_bss>:
      b6:	11 e0       	ldi	r17, 0x01	; 1
      b8:	ac e5       	ldi	r26, 0x5C	; 92
      ba:	b1 e0       	ldi	r27, 0x01	; 1
      bc:	01 c0       	rjmp	.+2      	; 0xc0 <.do_clear_bss_start>

000000be <.do_clear_bss_loop>:
      be:	1d 92       	st	X+, r1

000000c0 <.do_clear_bss_start>:
      c0:	a8 3b       	cpi	r26, 0xB8	; 184
      c2:	b1 07       	cpc	r27, r17
      c4:	e1 f7       	brne	.-8      	; 0xbe <.do_clear_bss_loop>
      c6:	0e 94 9c 05 	call	0xb38	; 0xb38 <main>
      ca:	0c 94 ce 08 	jmp	0x119c	; 0x119c <_exit>

000000ce <__bad_interrupt>:
      ce:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000d2 <FoodPizzaSmall_cb>:
}


void FoodPizzaSmall_cb(void)
{
	LCDclr();
      d2:	0e 94 45 02 	call	0x48a	; 0x48a <LCDclr>
	LCDGotoXY(0,0);
      d6:	60 e0       	ldi	r22, 0x00	; 0
      d8:	80 e0       	ldi	r24, 0x00	; 0
      da:	0e 94 6a 02 	call	0x4d4	; 0x4d4 <LCDGotoXY>
	LCDstring((uint8_t*)"SMALL PIZZA",11);
      de:	6b e0       	ldi	r22, 0x0B	; 11
      e0:	80 e6       	ldi	r24, 0x60	; 96
      e2:	90 e0       	ldi	r25, 0x00	; 0
      e4:	0e 94 4b 02 	call	0x496	; 0x496 <LCDstring>
	LCDGotoXY(0,1);
      e8:	61 e0       	ldi	r22, 0x01	; 1
      ea:	80 e0       	ldi	r24, 0x00	; 0
      ec:	0e 94 6a 02 	call	0x4d4	; 0x4d4 <LCDGotoXY>
	LCDstring((uint8_t*)"HAS SELECTED",12);
      f0:	6c e0       	ldi	r22, 0x0C	; 12
      f2:	8c e6       	ldi	r24, 0x6C	; 108
      f4:	90 e0       	ldi	r25, 0x00	; 0
      f6:	0e 94 4b 02 	call	0x496	; 0x496 <LCDstring>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
      fa:	2f e7       	ldi	r18, 0x7F	; 127
      fc:	8f e4       	ldi	r24, 0x4F	; 79
      fe:	92 e1       	ldi	r25, 0x12	; 18
     100:	21 50       	subi	r18, 0x01	; 1
     102:	80 40       	sbci	r24, 0x00	; 0
     104:	90 40       	sbci	r25, 0x00	; 0
     106:	e1 f7       	brne	.-8      	; 0x100 <FoodPizzaSmall_cb+0x2e>
     108:	00 c0       	rjmp	.+0      	; 0x10a <FoodPizzaSmall_cb+0x38>
     10a:	00 00       	nop
	_delay_ms(500);
	ButtonWait();
     10c:	0c 94 70 04 	jmp	0x8e0	; 0x8e0 <ButtonWait>

00000110 <FoodPizzaBig_cb>:
}

void FoodPizzaBig_cb(void)
{
	LCDclr();
     110:	0e 94 45 02 	call	0x48a	; 0x48a <LCDclr>
	LCDGotoXY(0,0);
     114:	60 e0       	ldi	r22, 0x00	; 0
     116:	80 e0       	ldi	r24, 0x00	; 0
     118:	0e 94 6a 02 	call	0x4d4	; 0x4d4 <LCDGotoXY>
	LCDstring((uint8_t*)"BIG PIZZA",9);
     11c:	69 e0       	ldi	r22, 0x09	; 9
     11e:	89 e7       	ldi	r24, 0x79	; 121
     120:	90 e0       	ldi	r25, 0x00	; 0
     122:	0e 94 4b 02 	call	0x496	; 0x496 <LCDstring>
	LCDGotoXY(0,1);
     126:	61 e0       	ldi	r22, 0x01	; 1
     128:	80 e0       	ldi	r24, 0x00	; 0
     12a:	0e 94 6a 02 	call	0x4d4	; 0x4d4 <LCDGotoXY>
	LCDstring((uint8_t*)"HAS SELECTED",12);
     12e:	6c e0       	ldi	r22, 0x0C	; 12
     130:	8c e6       	ldi	r24, 0x6C	; 108
     132:	90 e0       	ldi	r25, 0x00	; 0
     134:	0e 94 4b 02 	call	0x496	; 0x496 <LCDstring>
     138:	2f e7       	ldi	r18, 0x7F	; 127
     13a:	8f e4       	ldi	r24, 0x4F	; 79
     13c:	92 e1       	ldi	r25, 0x12	; 18
     13e:	21 50       	subi	r18, 0x01	; 1
     140:	80 40       	sbci	r24, 0x00	; 0
     142:	90 40       	sbci	r25, 0x00	; 0
     144:	e1 f7       	brne	.-8      	; 0x13e <FoodPizzaBig_cb+0x2e>
     146:	00 c0       	rjmp	.+0      	; 0x148 <FoodPizzaBig_cb+0x38>
     148:	00 00       	nop
	_delay_ms(500);
	ButtonWait();
     14a:	0c 94 70 04 	jmp	0x8e0	; 0x8e0 <ButtonWait>

0000014e <FoodKebabBig_cb>:
}
void FoodKebabBig_cb(void)
{
	LCDclr();
     14e:	0e 94 45 02 	call	0x48a	; 0x48a <LCDclr>
	LCDGotoXY(0,0);
     152:	60 e0       	ldi	r22, 0x00	; 0
     154:	80 e0       	ldi	r24, 0x00	; 0
     156:	0e 94 6a 02 	call	0x4d4	; 0x4d4 <LCDGotoXY>
	LCDstring((uint8_t*)"BIG KEBAB",9);
     15a:	69 e0       	ldi	r22, 0x09	; 9
     15c:	83 e8       	ldi	r24, 0x83	; 131
     15e:	90 e0       	ldi	r25, 0x00	; 0
     160:	0e 94 4b 02 	call	0x496	; 0x496 <LCDstring>
	LCDGotoXY(0,1);
     164:	61 e0       	ldi	r22, 0x01	; 1
     166:	80 e0       	ldi	r24, 0x00	; 0
     168:	0e 94 6a 02 	call	0x4d4	; 0x4d4 <LCDGotoXY>
	LCDstring((uint8_t*)"HAS SELECTED",12);
     16c:	6c e0       	ldi	r22, 0x0C	; 12
     16e:	8c e6       	ldi	r24, 0x6C	; 108
     170:	90 e0       	ldi	r25, 0x00	; 0
     172:	0e 94 4b 02 	call	0x496	; 0x496 <LCDstring>
     176:	2f e7       	ldi	r18, 0x7F	; 127
     178:	8f e4       	ldi	r24, 0x4F	; 79
     17a:	92 e1       	ldi	r25, 0x12	; 18
     17c:	21 50       	subi	r18, 0x01	; 1
     17e:	80 40       	sbci	r24, 0x00	; 0
     180:	90 40       	sbci	r25, 0x00	; 0
     182:	e1 f7       	brne	.-8      	; 0x17c <FoodKebabBig_cb+0x2e>
     184:	00 c0       	rjmp	.+0      	; 0x186 <FoodKebabBig_cb+0x38>
     186:	00 00       	nop
	_delay_ms(500);
	ButtonWait();
     188:	0c 94 70 04 	jmp	0x8e0	; 0x8e0 <ButtonWait>

0000018c <FoodKebabSmall_cb>:
}
void FoodKebabSmall_cb(void)
{
	LCDclr();
     18c:	0e 94 45 02 	call	0x48a	; 0x48a <LCDclr>
	LCDGotoXY(0,0);
     190:	60 e0       	ldi	r22, 0x00	; 0
     192:	80 e0       	ldi	r24, 0x00	; 0
     194:	0e 94 6a 02 	call	0x4d4	; 0x4d4 <LCDGotoXY>
	LCDstring((uint8_t*)"SMALL KEBAB",11);
     198:	6b e0       	ldi	r22, 0x0B	; 11
     19a:	8d e8       	ldi	r24, 0x8D	; 141
     19c:	90 e0       	ldi	r25, 0x00	; 0
     19e:	0e 94 4b 02 	call	0x496	; 0x496 <LCDstring>
	LCDGotoXY(0,1);
     1a2:	61 e0       	ldi	r22, 0x01	; 1
     1a4:	80 e0       	ldi	r24, 0x00	; 0
     1a6:	0e 94 6a 02 	call	0x4d4	; 0x4d4 <LCDGotoXY>
	LCDstring((uint8_t*)"HAS SELECTED",12);
     1aa:	6c e0       	ldi	r22, 0x0C	; 12
     1ac:	8c e6       	ldi	r24, 0x6C	; 108
     1ae:	90 e0       	ldi	r25, 0x00	; 0
     1b0:	0e 94 4b 02 	call	0x496	; 0x496 <LCDstring>
     1b4:	2f e7       	ldi	r18, 0x7F	; 127
     1b6:	8f e4       	ldi	r24, 0x4F	; 79
     1b8:	92 e1       	ldi	r25, 0x12	; 18
     1ba:	21 50       	subi	r18, 0x01	; 1
     1bc:	80 40       	sbci	r24, 0x00	; 0
     1be:	90 40       	sbci	r25, 0x00	; 0
     1c0:	e1 f7       	brne	.-8      	; 0x1ba <FoodKebabSmall_cb+0x2e>
     1c2:	00 c0       	rjmp	.+0      	; 0x1c4 <FoodKebabSmall_cb+0x38>
     1c4:	00 00       	nop
	_delay_ms(500);
	ButtonWait();
     1c6:	0c 94 70 04 	jmp	0x8e0	; 0x8e0 <ButtonWait>

000001ca <DrinkCola_cb>:
}
void DrinkCola_cb(void)
{
	LCDclr();
     1ca:	0e 94 45 02 	call	0x48a	; 0x48a <LCDclr>
	LCDGotoXY(0,0);
     1ce:	60 e0       	ldi	r22, 0x00	; 0
     1d0:	80 e0       	ldi	r24, 0x00	; 0
     1d2:	0e 94 6a 02 	call	0x4d4	; 0x4d4 <LCDGotoXY>
	LCDstring((uint8_t*)"COCA-COLA",9);
     1d6:	69 e0       	ldi	r22, 0x09	; 9
     1d8:	89 e9       	ldi	r24, 0x99	; 153
     1da:	90 e0       	ldi	r25, 0x00	; 0
     1dc:	0e 94 4b 02 	call	0x496	; 0x496 <LCDstring>
	LCDGotoXY(0,1);
     1e0:	61 e0       	ldi	r22, 0x01	; 1
     1e2:	80 e0       	ldi	r24, 0x00	; 0
     1e4:	0e 94 6a 02 	call	0x4d4	; 0x4d4 <LCDGotoXY>
	LCDstring((uint8_t*)"HAS SELECTED",12);
     1e8:	6c e0       	ldi	r22, 0x0C	; 12
     1ea:	8c e6       	ldi	r24, 0x6C	; 108
     1ec:	90 e0       	ldi	r25, 0x00	; 0
     1ee:	0e 94 4b 02 	call	0x496	; 0x496 <LCDstring>
     1f2:	2f e7       	ldi	r18, 0x7F	; 127
     1f4:	8f e4       	ldi	r24, 0x4F	; 79
     1f6:	92 e1       	ldi	r25, 0x12	; 18
     1f8:	21 50       	subi	r18, 0x01	; 1
     1fa:	80 40       	sbci	r24, 0x00	; 0
     1fc:	90 40       	sbci	r25, 0x00	; 0
     1fe:	e1 f7       	brne	.-8      	; 0x1f8 <DrinkCola_cb+0x2e>
     200:	00 c0       	rjmp	.+0      	; 0x202 <DrinkCola_cb+0x38>
     202:	00 00       	nop
	_delay_ms(500);
	ButtonWait();
     204:	0c 94 70 04 	jmp	0x8e0	; 0x8e0 <ButtonWait>

00000208 <DrinkPepsi_cb>:
}
void DrinkPepsi_cb(void)
{
	LCDclr();
     208:	0e 94 45 02 	call	0x48a	; 0x48a <LCDclr>
	LCDGotoXY(0,0);
     20c:	60 e0       	ldi	r22, 0x00	; 0
     20e:	80 e0       	ldi	r24, 0x00	; 0
     210:	0e 94 6a 02 	call	0x4d4	; 0x4d4 <LCDGotoXY>
	LCDstring((uint8_t*)"PEPSI",5);
     214:	65 e0       	ldi	r22, 0x05	; 5
     216:	83 ea       	ldi	r24, 0xA3	; 163
     218:	90 e0       	ldi	r25, 0x00	; 0
     21a:	0e 94 4b 02 	call	0x496	; 0x496 <LCDstring>
	LCDGotoXY(0,1);
     21e:	61 e0       	ldi	r22, 0x01	; 1
     220:	80 e0       	ldi	r24, 0x00	; 0
     222:	0e 94 6a 02 	call	0x4d4	; 0x4d4 <LCDGotoXY>
	LCDstring((uint8_t*)"HAS SELECTED",12);
     226:	6c e0       	ldi	r22, 0x0C	; 12
     228:	8c e6       	ldi	r24, 0x6C	; 108
     22a:	90 e0       	ldi	r25, 0x00	; 0
     22c:	0e 94 4b 02 	call	0x496	; 0x496 <LCDstring>
     230:	2f e7       	ldi	r18, 0x7F	; 127
     232:	8f e4       	ldi	r24, 0x4F	; 79
     234:	92 e1       	ldi	r25, 0x12	; 18
     236:	21 50       	subi	r18, 0x01	; 1
     238:	80 40       	sbci	r24, 0x00	; 0
     23a:	90 40       	sbci	r25, 0x00	; 0
     23c:	e1 f7       	brne	.-8      	; 0x236 <DrinkPepsi_cb+0x2e>
     23e:	00 c0       	rjmp	.+0      	; 0x240 <DrinkPepsi_cb+0x38>
     240:	00 00       	nop
	_delay_ms(500);
	ButtonWait();
     242:	0c 94 70 04 	jmp	0x8e0	; 0x8e0 <ButtonWait>

00000246 <Init>:
}


void Init(void)
{
	MenuMain[STATE_FOOD_MENU].cursorNum = 1;
     246:	21 e0       	ldi	r18, 0x01	; 1
     248:	30 e0       	ldi	r19, 0x00	; 0
     24a:	30 93 65 01 	sts	0x0165, r19
     24e:	20 93 64 01 	sts	0x0164, r18
	MenuMain[STATE_FOOD_MENU].menuText = (uint8_t*)"Food            ";
     252:	89 ea       	ldi	r24, 0xA9	; 169
     254:	90 e0       	ldi	r25, 0x00	; 0
     256:	90 93 67 01 	sts	0x0167, r25
     25a:	80 93 66 01 	sts	0x0166, r24
	MenuMain[STATE_FOOD_MENU].numOfChildren = 2;
     25e:	62 e0       	ldi	r22, 0x02	; 2
     260:	60 93 68 01 	sts	0x0168, r22
	MenuMain[STATE_FOOD_MENU].parentIndex = STATE_MENU;
     264:	10 92 69 01 	sts	0x0169, r1
	
	MenuMain[STATE_FOOD_PIZZA_MENU].cursorNum = 1;
     268:	30 93 6d 01 	sts	0x016D, r19
     26c:	20 93 6c 01 	sts	0x016C, r18
	MenuMain[STATE_FOOD_PIZZA_MENU].menuText = (uint8_t*)"Pizza           ";
     270:	8a eb       	ldi	r24, 0xBA	; 186
     272:	90 e0       	ldi	r25, 0x00	; 0
     274:	90 93 6f 01 	sts	0x016F, r25
     278:	80 93 6e 01 	sts	0x016E, r24
	MenuMain[STATE_FOOD_PIZZA_MENU].numOfChildren = 2;
     27c:	60 93 70 01 	sts	0x0170, r22
	MenuMain[STATE_FOOD_PIZZA_MENU].parentIndex = STATE_FOOD_MENU;
     280:	71 e0       	ldi	r23, 0x01	; 1
     282:	70 93 71 01 	sts	0x0171, r23
	
	MenuMain[STATE_FOOD_PIZZA_SMALL].cursorNum = 1;
     286:	30 93 75 01 	sts	0x0175, r19
     28a:	20 93 74 01 	sts	0x0174, r18
	MenuMain[STATE_FOOD_PIZZA_SMALL].menuText = (uint8_t*)"Pizza Small     ";
     28e:	8b ec       	ldi	r24, 0xCB	; 203
     290:	90 e0       	ldi	r25, 0x00	; 0
     292:	90 93 77 01 	sts	0x0177, r25
     296:	80 93 76 01 	sts	0x0176, r24
	MenuMain[STATE_FOOD_PIZZA_SMALL].numOfChildren = 0;
     29a:	10 92 78 01 	sts	0x0178, r1
	MenuMain[STATE_FOOD_PIZZA_SMALL].parentIndex = STATE_FOOD_PIZZA_MENU;
     29e:	60 93 79 01 	sts	0x0179, r22
	MenuMain[STATE_FOOD_PIZZA_SMALL].actFunction = &FoodPizzaSmall_cb;
     2a2:	89 e6       	ldi	r24, 0x69	; 105
     2a4:	90 e0       	ldi	r25, 0x00	; 0
     2a6:	90 93 7b 01 	sts	0x017B, r25
     2aa:	80 93 7a 01 	sts	0x017A, r24
	
	MenuMain[STATE_FOOD_PIZZA_BIG].cursorNum = 2;
     2ae:	82 e0       	ldi	r24, 0x02	; 2
     2b0:	90 e0       	ldi	r25, 0x00	; 0
     2b2:	90 93 7d 01 	sts	0x017D, r25
     2b6:	80 93 7c 01 	sts	0x017C, r24
	MenuMain[STATE_FOOD_PIZZA_BIG].menuText = (uint8_t*)"Pizza Big       ";
     2ba:	4c ed       	ldi	r20, 0xDC	; 220
     2bc:	50 e0       	ldi	r21, 0x00	; 0
     2be:	50 93 7f 01 	sts	0x017F, r21
     2c2:	40 93 7e 01 	sts	0x017E, r20
	MenuMain[STATE_FOOD_PIZZA_BIG].numOfChildren = 0;
     2c6:	10 92 80 01 	sts	0x0180, r1
	MenuMain[STATE_FOOD_PIZZA_BIG].parentIndex = STATE_FOOD_PIZZA_MENU;
     2ca:	60 93 81 01 	sts	0x0181, r22
	MenuMain[STATE_FOOD_PIZZA_BIG].actFunction = &FoodPizzaBig_cb;
     2ce:	48 e8       	ldi	r20, 0x88	; 136
     2d0:	50 e0       	ldi	r21, 0x00	; 0
     2d2:	50 93 83 01 	sts	0x0183, r21
     2d6:	40 93 82 01 	sts	0x0182, r20
	
	
	MenuMain[STATE_FOOD_KEBAB_MENU].cursorNum = 2;
     2da:	90 93 85 01 	sts	0x0185, r25
     2de:	80 93 84 01 	sts	0x0184, r24
	MenuMain[STATE_FOOD_KEBAB_MENU].menuText = (uint8_t*)"Kebab           ";
     2e2:	4d ee       	ldi	r20, 0xED	; 237
     2e4:	50 e0       	ldi	r21, 0x00	; 0
     2e6:	50 93 87 01 	sts	0x0187, r21
     2ea:	40 93 86 01 	sts	0x0186, r20
	MenuMain[STATE_FOOD_KEBAB_MENU].numOfChildren = 2;
     2ee:	60 93 88 01 	sts	0x0188, r22
	MenuMain[STATE_FOOD_KEBAB_MENU].parentIndex = STATE_FOOD_MENU;
     2f2:	70 93 89 01 	sts	0x0189, r23
	
	MenuMain[STATE_FOOD_KEBAB_SMALL].cursorNum = 1;
     2f6:	30 93 8d 01 	sts	0x018D, r19
     2fa:	20 93 8c 01 	sts	0x018C, r18
	MenuMain[STATE_FOOD_KEBAB_SMALL].menuText = (uint8_t*)"Kebab Small     ";
     2fe:	4e ef       	ldi	r20, 0xFE	; 254
     300:	50 e0       	ldi	r21, 0x00	; 0
     302:	50 93 8f 01 	sts	0x018F, r21
     306:	40 93 8e 01 	sts	0x018E, r20
	MenuMain[STATE_FOOD_KEBAB_SMALL].numOfChildren = 0;
     30a:	10 92 90 01 	sts	0x0190, r1
	MenuMain[STATE_FOOD_KEBAB_SMALL].parentIndex = STATE_FOOD_KEBAB_MENU;
     30e:	75 e0       	ldi	r23, 0x05	; 5
     310:	70 93 91 01 	sts	0x0191, r23
	MenuMain[STATE_FOOD_KEBAB_SMALL].actFunction = &FoodKebabSmall_cb;
     314:	46 ec       	ldi	r20, 0xC6	; 198
     316:	50 e0       	ldi	r21, 0x00	; 0
     318:	50 93 93 01 	sts	0x0193, r21
     31c:	40 93 92 01 	sts	0x0192, r20
	
	MenuMain[STATE_FOOD_KEBAB_BIG].cursorNum = 2;
     320:	90 93 95 01 	sts	0x0195, r25
     324:	80 93 94 01 	sts	0x0194, r24
	MenuMain[STATE_FOOD_KEBAB_BIG].menuText = (uint8_t*)"Kebab Big       ";
     328:	4f e0       	ldi	r20, 0x0F	; 15
     32a:	51 e0       	ldi	r21, 0x01	; 1
     32c:	50 93 97 01 	sts	0x0197, r21
     330:	40 93 96 01 	sts	0x0196, r20
	MenuMain[STATE_FOOD_KEBAB_BIG].numOfChildren = 0;
     334:	10 92 98 01 	sts	0x0198, r1
	MenuMain[STATE_FOOD_KEBAB_BIG].parentIndex = STATE_FOOD_KEBAB_MENU;
     338:	70 93 99 01 	sts	0x0199, r23
	MenuMain[STATE_FOOD_KEBAB_BIG].actFunction = &FoodKebabBig_cb;
     33c:	47 ea       	ldi	r20, 0xA7	; 167
     33e:	50 e0       	ldi	r21, 0x00	; 0
     340:	50 93 9b 01 	sts	0x019B, r21
     344:	40 93 9a 01 	sts	0x019A, r20
	
	
	MenuMain[STATE_DRINK_MENU].cursorNum = 2;
     348:	90 93 9d 01 	sts	0x019D, r25
     34c:	80 93 9c 01 	sts	0x019C, r24
	MenuMain[STATE_DRINK_MENU].menuText = (uint8_t*)"Drink           ";
     350:	40 e2       	ldi	r20, 0x20	; 32
     352:	51 e0       	ldi	r21, 0x01	; 1
     354:	50 93 9f 01 	sts	0x019F, r21
     358:	40 93 9e 01 	sts	0x019E, r20
	MenuMain[STATE_DRINK_MENU].numOfChildren = 2;
     35c:	60 93 a0 01 	sts	0x01A0, r22
	MenuMain[STATE_DRINK_MENU].parentIndex = STATE_MENU;
     360:	10 92 a1 01 	sts	0x01A1, r1
	
	MenuMain[STATE_DRINK_COLA].cursorNum = 1;
     364:	30 93 a5 01 	sts	0x01A5, r19
     368:	20 93 a4 01 	sts	0x01A4, r18
	MenuMain[STATE_DRINK_COLA].menuText = (uint8_t*)"Cola            ";
     36c:	21 e3       	ldi	r18, 0x31	; 49
     36e:	31 e0       	ldi	r19, 0x01	; 1
     370:	30 93 a7 01 	sts	0x01A7, r19
     374:	20 93 a6 01 	sts	0x01A6, r18
	MenuMain[STATE_DRINK_COLA].numOfChildren = 0;
     378:	10 92 a8 01 	sts	0x01A8, r1
	MenuMain[STATE_DRINK_COLA].parentIndex = STATE_DRINK_MENU;
     37c:	48 e0       	ldi	r20, 0x08	; 8
     37e:	40 93 a9 01 	sts	0x01A9, r20
	MenuMain[STATE_DRINK_COLA].actFunction = &DrinkCola_cb;
     382:	25 ee       	ldi	r18, 0xE5	; 229
     384:	30 e0       	ldi	r19, 0x00	; 0
     386:	30 93 ab 01 	sts	0x01AB, r19
     38a:	20 93 aa 01 	sts	0x01AA, r18
	
	MenuMain[STATE_DRINK_PEPSI].cursorNum = 2;
     38e:	90 93 ad 01 	sts	0x01AD, r25
     392:	80 93 ac 01 	sts	0x01AC, r24
	MenuMain[STATE_DRINK_PEPSI].menuText = (uint8_t*)"Pepsi           ";
     396:	82 e4       	ldi	r24, 0x42	; 66
     398:	91 e0       	ldi	r25, 0x01	; 1
     39a:	90 93 af 01 	sts	0x01AF, r25
     39e:	80 93 ae 01 	sts	0x01AE, r24
	MenuMain[STATE_DRINK_PEPSI].numOfChildren = 0;
     3a2:	10 92 b0 01 	sts	0x01B0, r1
	MenuMain[STATE_DRINK_PEPSI].parentIndex = STATE_DRINK_MENU;
     3a6:	40 93 b1 01 	sts	0x01B1, r20
	MenuMain[STATE_DRINK_PEPSI].actFunction = &DrinkPepsi_cb;
     3aa:	84 e0       	ldi	r24, 0x04	; 4
     3ac:	91 e0       	ldi	r25, 0x01	; 1
     3ae:	90 93 b3 01 	sts	0x01B3, r25
     3b2:	80 93 b2 01 	sts	0x01B2, r24
     3b6:	08 95       	ret

000003b8 <LCDMix_4Bit>:
//sets four port pins to corresponding nibble
//for high nibble use mask data & 0b11110000
//for low nibble use (data & 0b00001111)<<4
static void LCDMix_4Bit(uint8_t data)
{
  if((data)&(0b10000000)) LDPD7 |=1<<LCD_D7;
     3b8:	87 ff       	sbrs	r24, 7
     3ba:	02 c0       	rjmp	.+4      	; 0x3c0 <LCDMix_4Bit+0x8>
     3bc:	c0 9a       	sbi	0x18, 0	; 24
     3be:	01 c0       	rjmp	.+2      	; 0x3c2 <LCDMix_4Bit+0xa>
    else LDPD7 &=~(1<<LCD_D7);
     3c0:	c0 98       	cbi	0x18, 0	; 24
  if((data)&(0b01000000)) LDPD6 |=1<<LCD_D6;
     3c2:	86 ff       	sbrs	r24, 6
     3c4:	02 c0       	rjmp	.+4      	; 0x3ca <LCDMix_4Bit+0x12>
     3c6:	c1 9a       	sbi	0x18, 1	; 24
     3c8:	01 c0       	rjmp	.+2      	; 0x3cc <LCDMix_4Bit+0x14>
    else LDPD6 &=~(1<<LCD_D6);
     3ca:	c1 98       	cbi	0x18, 1	; 24
  if((data)&(0b00100000)) LDPD5 |=1<<LCD_D5;
     3cc:	85 ff       	sbrs	r24, 5
     3ce:	02 c0       	rjmp	.+4      	; 0x3d4 <LCDMix_4Bit+0x1c>
     3d0:	c2 9a       	sbi	0x18, 2	; 24
     3d2:	01 c0       	rjmp	.+2      	; 0x3d6 <LCDMix_4Bit+0x1e>
    else LDPD5&=~(1<<LCD_D5);
     3d4:	c2 98       	cbi	0x18, 2	; 24
  if((data)&(0b00010000)) LDPD4 |=1<<LCD_D4;
     3d6:	84 ff       	sbrs	r24, 4
     3d8:	02 c0       	rjmp	.+4      	; 0x3de <LCDMix_4Bit+0x26>
     3da:	c3 9a       	sbi	0x18, 3	; 24
     3dc:	08 95       	ret
    else LDPD4 &=~(1<<LCD_D4);	
     3de:	c3 98       	cbi	0x18, 3	; 24
     3e0:	08 95       	ret

000003e2 <LCDsendChar>:
		LCDdefinechar((LcdCustomChar+ch),chn++);
		ch=ch+8;
	}
}	
void LCDsendChar(uint8_t ch)		//Sends Char to LCD
{
     3e2:	cf 93       	push	r28
     3e4:	c8 2f       	mov	r28, r24
	LCP&=~(1<<LCD_E);	
	LCP&=~(1<<LCD_RS);
	_delay_ms(1);
#endif
#ifdef LCD_4BIT_M
	LCDMix_4Bit(ch & 0b11110000);
     3e6:	80 7f       	andi	r24, 0xF0	; 240
     3e8:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <LCDMix_4Bit>
	LDPRS |=1<<LCD_RS;
     3ec:	c5 9a       	sbi	0x18, 5	; 24
	LDPE |=1<<LCD_E;		
     3ee:	c4 9a       	sbi	0x18, 4	; 24
     3f0:	87 eb       	ldi	r24, 0xB7	; 183
     3f2:	9b e0       	ldi	r25, 0x0B	; 11
     3f4:	01 97       	sbiw	r24, 0x01	; 1
     3f6:	f1 f7       	brne	.-4      	; 0x3f4 <LCDsendChar+0x12>
     3f8:	00 c0       	rjmp	.+0      	; 0x3fa <LCDsendChar+0x18>
     3fa:	00 00       	nop
	_delay_ms(1);
	LDPE &=~(1<<LCD_E);
     3fc:	c4 98       	cbi	0x18, 4	; 24
	LDPRS &=~(1<<LCD_RS);
     3fe:	c5 98       	cbi	0x18, 5	; 24
     400:	87 eb       	ldi	r24, 0xB7	; 183
     402:	9b e0       	ldi	r25, 0x0B	; 11
     404:	01 97       	sbiw	r24, 0x01	; 1
     406:	f1 f7       	brne	.-4      	; 0x404 <LCDsendChar+0x22>
     408:	00 c0       	rjmp	.+0      	; 0x40a <LCDsendChar+0x28>
     40a:	00 00       	nop
	_delay_ms(1);
	LCDMix_4Bit((ch & 0b00001111)<<4);
     40c:	8c 2f       	mov	r24, r28
     40e:	82 95       	swap	r24
     410:	80 7f       	andi	r24, 0xF0	; 240
     412:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <LCDMix_4Bit>
	LDPRS |=1<<LCD_RS;
     416:	c5 9a       	sbi	0x18, 5	; 24
	LDPE |=1<<LCD_E;		
     418:	c4 9a       	sbi	0x18, 4	; 24
     41a:	87 eb       	ldi	r24, 0xB7	; 183
     41c:	9b e0       	ldi	r25, 0x0B	; 11
     41e:	01 97       	sbiw	r24, 0x01	; 1
     420:	f1 f7       	brne	.-4      	; 0x41e <LCDsendChar+0x3c>
     422:	00 c0       	rjmp	.+0      	; 0x424 <LCDsendChar+0x42>
     424:	00 00       	nop
	_delay_ms(1);
	LDPE &=~(1<<LCD_E);
     426:	c4 98       	cbi	0x18, 4	; 24
	LDPRS &=~(1<<LCD_RS);
     428:	c5 98       	cbi	0x18, 5	; 24
     42a:	87 eb       	ldi	r24, 0xB7	; 183
     42c:	9b e0       	ldi	r25, 0x0B	; 11
     42e:	01 97       	sbiw	r24, 0x01	; 1
     430:	f1 f7       	brne	.-4      	; 0x42e <LCDsendChar+0x4c>
     432:	00 c0       	rjmp	.+0      	; 0x434 <LCDsendChar+0x52>
     434:	00 00       	nop
	_delay_ms(1);
	LDPE &=~(1<<LCD_E);
	LDPRS &=~(1<<LCD_RS);
	_delay_ms(1);	
#endif
}
     436:	cf 91       	pop	r28
     438:	08 95       	ret

0000043a <LCDsendCommand>:
void LCDsendCommand(uint8_t cmd)	//Sends Command to LCD
{
     43a:	cf 93       	push	r28
     43c:	c8 2f       	mov	r28, r24
	_delay_ms(1);
	LCP&=~(1<<LCD_E);
	_delay_ms(1);	
#endif
#ifdef LCD_4BIT_M
	LCDMix_4Bit(cmd & 0b11110000);
     43e:	80 7f       	andi	r24, 0xF0	; 240
     440:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <LCDMix_4Bit>
	LDPE |=1<<LCD_E;		
     444:	c4 9a       	sbi	0x18, 4	; 24
     446:	87 eb       	ldi	r24, 0xB7	; 183
     448:	9b e0       	ldi	r25, 0x0B	; 11
     44a:	01 97       	sbiw	r24, 0x01	; 1
     44c:	f1 f7       	brne	.-4      	; 0x44a <LCDsendCommand+0x10>
     44e:	00 c0       	rjmp	.+0      	; 0x450 <LCDsendCommand+0x16>
     450:	00 00       	nop
	_delay_ms(1);
	LDPE &=~(1<<LCD_E);
     452:	c4 98       	cbi	0x18, 4	; 24
     454:	87 eb       	ldi	r24, 0xB7	; 183
     456:	9b e0       	ldi	r25, 0x0B	; 11
     458:	01 97       	sbiw	r24, 0x01	; 1
     45a:	f1 f7       	brne	.-4      	; 0x458 <LCDsendCommand+0x1e>
     45c:	00 c0       	rjmp	.+0      	; 0x45e <LCDsendCommand+0x24>
     45e:	00 00       	nop
	_delay_ms(1);
	LCDMix_4Bit((cmd & 0b00001111)<<4);
     460:	8c 2f       	mov	r24, r28
     462:	82 95       	swap	r24
     464:	80 7f       	andi	r24, 0xF0	; 240
     466:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <LCDMix_4Bit>
	LDPE |=1<<LCD_E;		
     46a:	c4 9a       	sbi	0x18, 4	; 24
     46c:	87 eb       	ldi	r24, 0xB7	; 183
     46e:	9b e0       	ldi	r25, 0x0B	; 11
     470:	01 97       	sbiw	r24, 0x01	; 1
     472:	f1 f7       	brne	.-4      	; 0x470 <LCDsendCommand+0x36>
     474:	00 c0       	rjmp	.+0      	; 0x476 <LCDsendCommand+0x3c>
     476:	00 00       	nop
	_delay_ms(1);
	LDPE &=~(1<<LCD_E);
     478:	c4 98       	cbi	0x18, 4	; 24
     47a:	87 eb       	ldi	r24, 0xB7	; 183
     47c:	9b e0       	ldi	r25, 0x0B	; 11
     47e:	01 97       	sbiw	r24, 0x01	; 1
     480:	f1 f7       	brne	.-4      	; 0x47e <LCDsendCommand+0x44>
     482:	00 c0       	rjmp	.+0      	; 0x484 <LCDsendCommand+0x4a>
     484:	00 00       	nop
	LDPE |=1<<LCD_E;		
	_delay_ms(1);
	LDPE &=~(1<<LCD_E);
	_delay_ms(1);	
#endif
}		
     486:	cf 91       	pop	r28
     488:	08 95       	ret

0000048a <LCDclr>:
void LCDclr(void)				//Clears LCD
{
	LCDsendCommand(1<<LCD_CLR);
     48a:	81 e0       	ldi	r24, 0x01	; 1
     48c:	0c 94 1d 02 	jmp	0x43a	; 0x43a <LCDsendCommand>

00000490 <LCDhome>:
}
void LCDhome(void)			//LCD cursor home
{
	LCDsendCommand(1<<LCD_HOME);
     490:	82 e0       	ldi	r24, 0x02	; 2
     492:	0c 94 1d 02 	jmp	0x43a	; 0x43a <LCDsendCommand>

00000496 <LCDstring>:
}
void LCDstring(uint8_t* data, uint8_t nBytes)	//Outputs string to LCD
{
     496:	ef 92       	push	r14
     498:	ff 92       	push	r15
     49a:	1f 93       	push	r17
     49c:	cf 93       	push	r28
     49e:	df 93       	push	r29
     4a0:	1f 92       	push	r1
     4a2:	cd b7       	in	r28, 0x3d	; 61
     4a4:	de b7       	in	r29, 0x3e	; 62
register uint8_t i;

	// check to make sure we have a good pointer
	if (!data) return;
     4a6:	00 97       	sbiw	r24, 0x00	; 0
     4a8:	71 f0       	breq	.+28     	; 0x4c6 <LCDstring+0x30>
     4aa:	18 2f       	mov	r17, r24
     4ac:	7c 01       	movw	r14, r24
     4ae:	8e 2d       	mov	r24, r14
     4b0:	81 1b       	sub	r24, r17

	// print data
	for(i=0; i<nBytes; i++)
     4b2:	86 17       	cp	r24, r22
     4b4:	40 f4       	brcc	.+16     	; 0x4c6 <LCDstring+0x30>
	{
		LCDsendChar(data[i]);
     4b6:	f7 01       	movw	r30, r14
     4b8:	81 91       	ld	r24, Z+
     4ba:	7f 01       	movw	r14, r30
     4bc:	69 83       	std	Y+1, r22	; 0x01
     4be:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <LCDsendChar>
     4c2:	69 81       	ldd	r22, Y+1	; 0x01
     4c4:	f4 cf       	rjmp	.-24     	; 0x4ae <LCDstring+0x18>
	}
}
     4c6:	0f 90       	pop	r0
     4c8:	df 91       	pop	r29
     4ca:	cf 91       	pop	r28
     4cc:	1f 91       	pop	r17
     4ce:	ff 90       	pop	r15
     4d0:	ef 90       	pop	r14
     4d2:	08 95       	ret

000004d4 <LCDGotoXY>:
void LCDGotoXY(uint8_t x, uint8_t y)	//Cursor to X Y position
{
	register uint8_t DDRAMAddr;
	// remap lines into proper order
	switch(y)
     4d4:	62 30       	cpi	r22, 0x02	; 2
     4d6:	31 f0       	breq	.+12     	; 0x4e4 <LCDGotoXY+0x10>
     4d8:	63 30       	cpi	r22, 0x03	; 3
     4da:	31 f0       	breq	.+12     	; 0x4e8 <LCDGotoXY+0x14>
     4dc:	61 30       	cpi	r22, 0x01	; 1
     4de:	29 f4       	brne	.+10     	; 0x4ea <LCDGotoXY+0x16>
	{
	case 0: DDRAMAddr = LCD_LINE0_DDRAMADDR+x; break;
	case 1: DDRAMAddr = LCD_LINE1_DDRAMADDR+x; break;
     4e0:	80 5c       	subi	r24, 0xC0	; 192
     4e2:	03 c0       	rjmp	.+6      	; 0x4ea <LCDGotoXY+0x16>
	case 2: DDRAMAddr = LCD_LINE2_DDRAMADDR+x; break;
     4e4:	8c 5e       	subi	r24, 0xEC	; 236
     4e6:	01 c0       	rjmp	.+2      	; 0x4ea <LCDGotoXY+0x16>
	case 3: DDRAMAddr = LCD_LINE3_DDRAMADDR+x; break;
     4e8:	8c 5a       	subi	r24, 0xAC	; 172
	default: DDRAMAddr = LCD_LINE0_DDRAMADDR+x;
	}
	// set data address
	LCDsendCommand(1<<LCD_DDRAM | DDRAMAddr);
     4ea:	80 68       	ori	r24, 0x80	; 128
     4ec:	0c 94 1d 02 	jmp	0x43a	; 0x43a <LCDsendCommand>

000004f0 <CopyStringtoLCD>:
}
//Copies string from flash memory to LCD at x y position
//const uint8_t welcomeln1[] PROGMEM="AVR LCD DEMO\0";
//CopyStringtoLCD(welcomeln1, 3, 1);	
void CopyStringtoLCD(const uint8_t *FlashLoc, uint8_t x, uint8_t y)
{
     4f0:	1f 93       	push	r17
     4f2:	cf 93       	push	r28
     4f4:	df 93       	push	r29
     4f6:	ec 01       	movw	r28, r24
     4f8:	86 2f       	mov	r24, r22
	uint8_t i;
	LCDGotoXY(x,y);
     4fa:	64 2f       	mov	r22, r20
     4fc:	0e 94 6a 02 	call	0x4d4	; 0x4d4 <LCDGotoXY>
	for(i=0;(uint8_t)pgm_read_byte(&FlashLoc[i]);i++)
     500:	10 e0       	ldi	r17, 0x00	; 0
     502:	fe 01       	movw	r30, r28
     504:	e1 0f       	add	r30, r17
     506:	f1 1d       	adc	r31, r1
     508:	84 91       	lpm	r24, Z
     50a:	88 23       	and	r24, r24
     50c:	21 f0       	breq	.+8      	; 0x516 <CopyStringtoLCD+0x26>
	{
		LCDsendChar((uint8_t)pgm_read_byte(&FlashLoc[i]));
     50e:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <LCDsendChar>
//CopyStringtoLCD(welcomeln1, 3, 1);	
void CopyStringtoLCD(const uint8_t *FlashLoc, uint8_t x, uint8_t y)
{
	uint8_t i;
	LCDGotoXY(x,y);
	for(i=0;(uint8_t)pgm_read_byte(&FlashLoc[i]);i++)
     512:	1f 5f       	subi	r17, 0xFF	; 255
     514:	f6 cf       	rjmp	.-20     	; 0x502 <CopyStringtoLCD+0x12>
	{
		LCDsendChar((uint8_t)pgm_read_byte(&FlashLoc[i]));
	}
}
     516:	df 91       	pop	r29
     518:	cf 91       	pop	r28
     51a:	1f 91       	pop	r17
     51c:	08 95       	ret

0000051e <LCDdefinechar>:
0b00000000,
0b00000000
};
LCDdefinechar(backslash,0);
*/
void LCDdefinechar(const uint8_t *pc,uint8_t char_code){
     51e:	ef 92       	push	r14
     520:	ff 92       	push	r15
     522:	0f 93       	push	r16
     524:	1f 93       	push	r17
     526:	cf 93       	push	r28
     528:	df 93       	push	r29
     52a:	8c 01       	movw	r16, r24
	uint8_t a, pcc;
	uint16_t i;
	a=(char_code<<3)|0x40;
     52c:	88 e0       	ldi	r24, 0x08	; 8
     52e:	68 9f       	mul	r22, r24
     530:	b0 01       	movw	r22, r0
     532:	11 24       	eor	r1, r1
     534:	86 2f       	mov	r24, r22
     536:	80 64       	ori	r24, 0x40	; 64
     538:	e8 2e       	mov	r14, r24
	for (i=0; i<8; i++){
     53a:	c0 e0       	ldi	r28, 0x00	; 0
     53c:	d0 e0       	ldi	r29, 0x00	; 0
     53e:	f8 01       	movw	r30, r16
     540:	ec 0f       	add	r30, r28
     542:	fd 1f       	adc	r31, r29
		pcc=pgm_read_byte(&pc[i]);
     544:	f4 90       	lpm	r15, Z
		LCDsendCommand(a++);
     546:	8c 2f       	mov	r24, r28
     548:	8e 0d       	add	r24, r14
     54a:	0e 94 1d 02 	call	0x43a	; 0x43a <LCDsendCommand>
		LCDsendChar(pcc);
     54e:	8f 2d       	mov	r24, r15
     550:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <LCDsendChar>
*/
void LCDdefinechar(const uint8_t *pc,uint8_t char_code){
	uint8_t a, pcc;
	uint16_t i;
	a=(char_code<<3)|0x40;
	for (i=0; i<8; i++){
     554:	21 96       	adiw	r28, 0x01	; 1
     556:	c8 30       	cpi	r28, 0x08	; 8
     558:	d1 05       	cpc	r29, r1
     55a:	89 f7       	brne	.-30     	; 0x53e <LCDdefinechar+0x20>
		pcc=pgm_read_byte(&pc[i]);
		LCDsendCommand(a++);
		LCDsendChar(pcc);
		}
}
     55c:	df 91       	pop	r29
     55e:	cf 91       	pop	r28
     560:	1f 91       	pop	r17
     562:	0f 91       	pop	r16
     564:	ff 90       	pop	r15
     566:	ef 90       	pop	r14
     568:	08 95       	ret

0000056a <LCDinit>:
  if((data)&(0b00000001)) LDPD0 |=1<<LCD_D0;
    else LDPD0 &=~(1<<LCD_D0);			
}
#endif
void LCDinit(void)//Initializes LCD
{
     56a:	1f 93       	push	r17
     56c:	cf 93       	push	r28
     56e:	df 93       	push	r29
     570:	87 ec       	ldi	r24, 0xC7	; 199
     572:	9f ea       	ldi	r25, 0xAF	; 175
     574:	01 97       	sbiw	r24, 0x01	; 1
     576:	f1 f7       	brne	.-4      	; 0x574 <LCDinit+0xa>
     578:	00 c0       	rjmp	.+0      	; 0x57a <LCDinit+0x10>
     57a:	00 00       	nop

#ifdef LCD_4BIT_M
	//4 mixed bit part
	_delay_ms(15);
	//zero to data pins
	LCDMix_4Bit(0b00000000);
     57c:	80 e0       	ldi	r24, 0x00	; 0
     57e:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <LCDMix_4Bit>
	//zero to control pins
	LDPRS &=~(1<<LCD_RS);
     582:	c5 98       	cbi	0x18, 5	; 24
	LDPRW &=~(1<<LCD_RW);
     584:	c7 98       	cbi	0x18, 7	; 24
	LDPE &=~(1<<LCD_E);
     586:	c4 98       	cbi	0x18, 4	; 24
	//set data direction
	LDDD4 |=1<<LCD_D4;
     588:	bb 9a       	sbi	0x17, 3	; 23
	LDDD5 |=1<<LCD_D5;
     58a:	ba 9a       	sbi	0x17, 2	; 23
	LDDD6 |=1<<LCD_D6;
     58c:	b9 9a       	sbi	0x17, 1	; 23
	LDDD7 |=1<<LCD_D7;
     58e:	b8 9a       	sbi	0x17, 0	; 23
	//control direction pins
	LDDRS |=1<<LCD_RS;
     590:	bd 9a       	sbi	0x17, 5	; 23
	LDDRW |=1<<LCD_RW;
     592:	bf 9a       	sbi	0x17, 7	; 23
	LDDE |=1<<LCD_E;
     594:	bc 9a       	sbi	0x17, 4	; 23
   //---------one------
	LCDMix_4Bit(0b00110000);
     596:	80 e3       	ldi	r24, 0x30	; 48
     598:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <LCDMix_4Bit>
	LDPE |=1<<LCD_E;		
     59c:	c4 9a       	sbi	0x18, 4	; 24
     59e:	87 eb       	ldi	r24, 0xB7	; 183
     5a0:	9b e0       	ldi	r25, 0x0B	; 11
     5a2:	01 97       	sbiw	r24, 0x01	; 1
     5a4:	f1 f7       	brne	.-4      	; 0x5a2 <LCDinit+0x38>
     5a6:	00 c0       	rjmp	.+0      	; 0x5a8 <LCDinit+0x3e>
     5a8:	00 00       	nop
	_delay_ms(1);
	LDPE &=~(1<<LCD_E);
     5aa:	c4 98       	cbi	0x18, 4	; 24
     5ac:	87 eb       	ldi	r24, 0xB7	; 183
     5ae:	9b e0       	ldi	r25, 0x0B	; 11
     5b0:	01 97       	sbiw	r24, 0x01	; 1
     5b2:	f1 f7       	brne	.-4      	; 0x5b0 <LCDinit+0x46>
     5b4:	00 c0       	rjmp	.+0      	; 0x5b6 <LCDinit+0x4c>
     5b6:	00 00       	nop
	_delay_ms(1);
	//-----------two-----------
	LCDMix_4Bit(0b00110000);
     5b8:	80 e3       	ldi	r24, 0x30	; 48
     5ba:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <LCDMix_4Bit>
	LDPE |=1<<LCD_E;		
     5be:	c4 9a       	sbi	0x18, 4	; 24
     5c0:	87 eb       	ldi	r24, 0xB7	; 183
     5c2:	9b e0       	ldi	r25, 0x0B	; 11
     5c4:	01 97       	sbiw	r24, 0x01	; 1
     5c6:	f1 f7       	brne	.-4      	; 0x5c4 <LCDinit+0x5a>
     5c8:	00 c0       	rjmp	.+0      	; 0x5ca <LCDinit+0x60>
     5ca:	00 00       	nop
	_delay_ms(1);
	LDPE &=~(1<<LCD_E);
     5cc:	c4 98       	cbi	0x18, 4	; 24
     5ce:	87 eb       	ldi	r24, 0xB7	; 183
     5d0:	9b e0       	ldi	r25, 0x0B	; 11
     5d2:	01 97       	sbiw	r24, 0x01	; 1
     5d4:	f1 f7       	brne	.-4      	; 0x5d2 <LCDinit+0x68>
     5d6:	00 c0       	rjmp	.+0      	; 0x5d8 <LCDinit+0x6e>
     5d8:	00 00       	nop
	_delay_ms(1);
	//-------three-------------
	LCDMix_4Bit(0b00100000);
     5da:	80 e2       	ldi	r24, 0x20	; 32
     5dc:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <LCDMix_4Bit>
	LDPE |=1<<LCD_E;		
     5e0:	c4 9a       	sbi	0x18, 4	; 24
     5e2:	87 eb       	ldi	r24, 0xB7	; 183
     5e4:	9b e0       	ldi	r25, 0x0B	; 11
     5e6:	01 97       	sbiw	r24, 0x01	; 1
     5e8:	f1 f7       	brne	.-4      	; 0x5e6 <LCDinit+0x7c>
     5ea:	00 c0       	rjmp	.+0      	; 0x5ec <LCDinit+0x82>
     5ec:	00 00       	nop
	_delay_ms(1);
	LDPE &=~(1<<LCD_E);
     5ee:	c4 98       	cbi	0x18, 4	; 24
     5f0:	87 eb       	ldi	r24, 0xB7	; 183
     5f2:	9b e0       	ldi	r25, 0x0B	; 11
     5f4:	01 97       	sbiw	r24, 0x01	; 1
     5f6:	f1 f7       	brne	.-4      	; 0x5f4 <LCDinit+0x8a>
     5f8:	00 c0       	rjmp	.+0      	; 0x5fa <LCDinit+0x90>
     5fa:	00 00       	nop
	_delay_ms(1);
	//--------4 bit--dual line---------------
	LCDsendCommand(0b00101000);
     5fc:	88 e2       	ldi	r24, 0x28	; 40
     5fe:	0e 94 1d 02 	call	0x43a	; 0x43a <LCDsendCommand>
   //-----increment address, invisible cursor shift------
	LCDsendCommand(0b00001100);
     602:	8c e0       	ldi	r24, 0x0C	; 12
     604:	0e 94 1d 02 	call	0x43a	; 0x43a <LCDsendCommand>
     608:	c4 e5       	ldi	r28, 0x54	; 84
     60a:	d0 e0       	ldi	r29, 0x00	; 0
	LCDsendCommand(0b00111000);
   //-----increment address, invisible cursor shift------
	LCDsendCommand(0b00001100);
#endif
		//init 8 custom chars
	uint8_t ch=0, chn=0;
     60c:	60 e0       	ldi	r22, 0x00	; 0
	while(ch<64)
	{
		LCDdefinechar((LcdCustomChar+ch),chn++);
     60e:	11 e0       	ldi	r17, 0x01	; 1
     610:	16 0f       	add	r17, r22
     612:	ce 01       	movw	r24, r28
     614:	0e 94 8f 02 	call	0x51e	; 0x51e <LCDdefinechar>
     618:	28 96       	adiw	r28, 0x08	; 8
   //-----increment address, invisible cursor shift------
	LCDsendCommand(0b00001100);
#endif
		//init 8 custom chars
	uint8_t ch=0, chn=0;
	while(ch<64)
     61a:	18 30       	cpi	r17, 0x08	; 8
     61c:	11 f0       	breq	.+4      	; 0x622 <LCDinit+0xb8>
	{
		LCDdefinechar((LcdCustomChar+ch),chn++);
     61e:	61 2f       	mov	r22, r17
     620:	f6 cf       	rjmp	.-20     	; 0x60e <LCDinit+0xa4>
		ch=ch+8;
	}
}	
     622:	df 91       	pop	r29
     624:	cf 91       	pop	r28
     626:	1f 91       	pop	r17
     628:	08 95       	ret

0000062a <LCDshiftLeft>:
		LCDsendChar(pcc);
		}
}

void LCDshiftLeft(uint8_t n)	//Scrol n of characters Right
{
     62a:	cf 93       	push	r28
     62c:	df 93       	push	r29
     62e:	d8 2f       	mov	r29, r24
	for (uint8_t i=0;i<n;i++)
     630:	c0 e0       	ldi	r28, 0x00	; 0
     632:	cd 17       	cp	r28, r29
     634:	29 f0       	breq	.+10     	; 0x640 <LCDshiftLeft+0x16>
	{
		LCDsendCommand(0x1E);
     636:	8e e1       	ldi	r24, 0x1E	; 30
     638:	0e 94 1d 02 	call	0x43a	; 0x43a <LCDsendCommand>
		}
}

void LCDshiftLeft(uint8_t n)	//Scrol n of characters Right
{
	for (uint8_t i=0;i<n;i++)
     63c:	cf 5f       	subi	r28, 0xFF	; 255
     63e:	f9 cf       	rjmp	.-14     	; 0x632 <LCDshiftLeft+0x8>
	{
		LCDsendCommand(0x1E);
	}
}
     640:	df 91       	pop	r29
     642:	cf 91       	pop	r28
     644:	08 95       	ret

00000646 <LCDshiftRight>:
void LCDshiftRight(uint8_t n)	//Scrol n of characters Left
{
     646:	cf 93       	push	r28
     648:	df 93       	push	r29
     64a:	d8 2f       	mov	r29, r24
	for (uint8_t i=0;i<n;i++)
     64c:	c0 e0       	ldi	r28, 0x00	; 0
     64e:	cd 17       	cp	r28, r29
     650:	29 f0       	breq	.+10     	; 0x65c <LCDshiftRight+0x16>
	{
		LCDsendCommand(0x18);
     652:	88 e1       	ldi	r24, 0x18	; 24
     654:	0e 94 1d 02 	call	0x43a	; 0x43a <LCDsendCommand>
		LCDsendCommand(0x1E);
	}
}
void LCDshiftRight(uint8_t n)	//Scrol n of characters Left
{
	for (uint8_t i=0;i<n;i++)
     658:	cf 5f       	subi	r28, 0xFF	; 255
     65a:	f9 cf       	rjmp	.-14     	; 0x64e <LCDshiftRight+0x8>
	{
		LCDsendCommand(0x18);
	}
}
     65c:	df 91       	pop	r29
     65e:	cf 91       	pop	r28
     660:	08 95       	ret

00000662 <LCDcursorOn>:
void LCDcursorOn(void) //displays LCD cursor
{
	LCDsendCommand(0x0E);
     662:	8e e0       	ldi	r24, 0x0E	; 14
     664:	0c 94 1d 02 	jmp	0x43a	; 0x43a <LCDsendCommand>

00000668 <LCDcursorOnBlink>:
}
void LCDcursorOnBlink(void)	//displays LCD blinking cursor
{
	LCDsendCommand(0x0F);
     668:	8f e0       	ldi	r24, 0x0F	; 15
     66a:	0c 94 1d 02 	jmp	0x43a	; 0x43a <LCDsendCommand>

0000066e <LCDcursorOFF>:
}
void LCDcursorOFF(void)	//turns OFF cursor
{
	LCDsendCommand(0x0C);
     66e:	8c e0       	ldi	r24, 0x0C	; 12
     670:	0c 94 1d 02 	jmp	0x43a	; 0x43a <LCDsendCommand>

00000674 <LCDblank>:
}
void LCDblank(void)		//blanks LCD
{
	LCDsendCommand(0x08);
     674:	88 e0       	ldi	r24, 0x08	; 8
     676:	0c 94 1d 02 	jmp	0x43a	; 0x43a <LCDsendCommand>

0000067a <LCDvisible>:
}
void LCDvisible(void)		//Shows LCD
{
	LCDsendCommand(0x0C);
     67a:	8c e0       	ldi	r24, 0x0C	; 12
     67c:	0c 94 1d 02 	jmp	0x43a	; 0x43a <LCDsendCommand>

00000680 <LCDcursorLeft>:
}
void LCDcursorLeft(uint8_t n)	//Moves cursor by n poisitions left
{
     680:	cf 93       	push	r28
     682:	df 93       	push	r29
     684:	d8 2f       	mov	r29, r24
	for (uint8_t i=0;i<n;i++)
     686:	c0 e0       	ldi	r28, 0x00	; 0
     688:	cd 17       	cp	r28, r29
     68a:	29 f0       	breq	.+10     	; 0x696 <LCDcursorLeft+0x16>
	{
		LCDsendCommand(0x10);
     68c:	80 e1       	ldi	r24, 0x10	; 16
     68e:	0e 94 1d 02 	call	0x43a	; 0x43a <LCDsendCommand>
{
	LCDsendCommand(0x0C);
}
void LCDcursorLeft(uint8_t n)	//Moves cursor by n poisitions left
{
	for (uint8_t i=0;i<n;i++)
     692:	cf 5f       	subi	r28, 0xFF	; 255
     694:	f9 cf       	rjmp	.-14     	; 0x688 <LCDcursorLeft+0x8>
	{
		LCDsendCommand(0x10);
	}
}
     696:	df 91       	pop	r29
     698:	cf 91       	pop	r28
     69a:	08 95       	ret

0000069c <LCDcursorRight>:
void LCDcursorRight(uint8_t n)	//Moves cursor by n poisitions left
{
     69c:	cf 93       	push	r28
     69e:	df 93       	push	r29
     6a0:	d8 2f       	mov	r29, r24
	for (uint8_t i=0;i<n;i++)
     6a2:	c0 e0       	ldi	r28, 0x00	; 0
     6a4:	cd 17       	cp	r28, r29
     6a6:	29 f0       	breq	.+10     	; 0x6b2 <LCDcursorRight+0x16>
	{
		LCDsendCommand(0x14);
     6a8:	84 e1       	ldi	r24, 0x14	; 20
     6aa:	0e 94 1d 02 	call	0x43a	; 0x43a <LCDsendCommand>
		LCDsendCommand(0x10);
	}
}
void LCDcursorRight(uint8_t n)	//Moves cursor by n poisitions left
{
	for (uint8_t i=0;i<n;i++)
     6ae:	cf 5f       	subi	r28, 0xFF	; 255
     6b0:	f9 cf       	rjmp	.-14     	; 0x6a4 <LCDcursorRight+0x8>
	{
		LCDsendCommand(0x14);
	}
}
     6b2:	df 91       	pop	r29
     6b4:	cf 91       	pop	r28
     6b6:	08 95       	ret

000006b8 <LCDprogressBar>:
//adapted fro mAVRLIB
void LCDprogressBar(uint8_t progress, uint8_t maxprogress, uint8_t length)
{
     6b8:	cf 92       	push	r12
     6ba:	df 92       	push	r13
     6bc:	ef 92       	push	r14
     6be:	ff 92       	push	r15
     6c0:	0f 93       	push	r16
     6c2:	1f 93       	push	r17
     6c4:	cf 93       	push	r28
     6c6:	df 93       	push	r29
     6c8:	1f 92       	push	r1
     6ca:	cd b7       	in	r28, 0x3d	; 61
     6cc:	de b7       	in	r29, 0x3e	; 62
	// ***note, LCD chars 0-5 must be programmed as the bar characters
	// char 0 = empty ... char 5 = full

	// total pixel length of bargraph equals length*PROGRESSPIXELS_PER_CHAR;
	// pixel length of bar itself is
	pixelprogress = ((progress*(length*PROGRESSPIXELS_PER_CHAR))/maxprogress);
     6ce:	56 e0       	ldi	r21, 0x06	; 6
     6d0:	45 9f       	mul	r20, r21
     6d2:	90 01       	movw	r18, r0
     6d4:	11 24       	eor	r1, r1
     6d6:	e8 2f       	mov	r30, r24
     6d8:	e2 9f       	mul	r30, r18
     6da:	c0 01       	movw	r24, r0
     6dc:	e3 9f       	mul	r30, r19
     6de:	90 0d       	add	r25, r0
     6e0:	11 24       	eor	r1, r1
     6e2:	70 e0       	ldi	r23, 0x00	; 0
     6e4:	0e 94 db 05 	call	0xbb6	; 0xbb6 <__divmodhi4>
     6e8:	8b 01       	movw	r16, r22
				c = 0;
			}
			else
			{
				// this is a partial block
				c = pixelprogress % PROGRESSPIXELS_PER_CHAR;
     6ea:	cb 01       	movw	r24, r22
     6ec:	66 e0       	ldi	r22, 0x06	; 6
     6ee:	70 e0       	ldi	r23, 0x00	; 0
     6f0:	0e 94 c7 05 	call	0xb8e	; 0xb8e <__udivmodhi4>
     6f4:	e8 2e       	mov	r14, r24
	// total pixel length of bargraph equals length*PROGRESSPIXELS_PER_CHAR;
	// pixel length of bar itself is
	pixelprogress = ((progress*(length*PROGRESSPIXELS_PER_CHAR))/maxprogress);
	
	// print exactly "length" characters
	for(i=0; i<length; i++)
     6f6:	c1 2c       	mov	r12, r1
     6f8:	d1 2c       	mov	r13, r1
     6fa:	f1 2c       	mov	r15, r1
     6fc:	f4 16       	cp	r15, r20
     6fe:	b9 f0       	breq	.+46     	; 0x72e <LCDprogressBar+0x76>
     700:	96 01       	movw	r18, r12
     702:	2b 5f       	subi	r18, 0xFB	; 251
     704:	3f 4f       	sbci	r19, 0xFF	; 255
	{
		// check if this is a full block, or partial or empty
		// (u16) cast is needed to avoid sign comparison warning
		if( ((i*(uint16_t)PROGRESSPIXELS_PER_CHAR)+5) > pixelprogress )
     706:	02 17       	cp	r16, r18
     708:	13 07       	cpc	r17, r19
     70a:	28 f4       	brcc	.+10     	; 0x716 <LCDprogressBar+0x5e>
		{
			// this is a partial or empty block
			if( ((i*(uint16_t)PROGRESSPIXELS_PER_CHAR)) > pixelprogress )
     70c:	0c 15       	cp	r16, r12
     70e:	1d 05       	cpc	r17, r13
     710:	20 f0       	brcs	.+8      	; 0x71a <LCDprogressBar+0x62>
				c = 0;
			}
			else
			{
				// this is a partial block
				c = pixelprogress % PROGRESSPIXELS_PER_CHAR;
     712:	8e 2d       	mov	r24, r14
     714:	03 c0       	rjmp	.+6      	; 0x71c <LCDprogressBar+0x64>
			}
		}
		else
		{
			// this is a full block
			c = 5;
     716:	85 e0       	ldi	r24, 0x05	; 5
     718:	01 c0       	rjmp	.+2      	; 0x71c <LCDprogressBar+0x64>
			// this is a partial or empty block
			if( ((i*(uint16_t)PROGRESSPIXELS_PER_CHAR)) > pixelprogress )
			{
				// this is an empty block
				// use space character?
				c = 0;
     71a:	80 e0       	ldi	r24, 0x00	; 0
			// this is a full block
			c = 5;
		}
		
		// write character to display
		LCDsendChar(c);
     71c:	49 83       	std	Y+1, r20	; 0x01
     71e:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <LCDsendChar>
	// total pixel length of bargraph equals length*PROGRESSPIXELS_PER_CHAR;
	// pixel length of bar itself is
	pixelprogress = ((progress*(length*PROGRESSPIXELS_PER_CHAR))/maxprogress);
	
	// print exactly "length" characters
	for(i=0; i<length; i++)
     722:	f3 94       	inc	r15
     724:	f6 e0       	ldi	r31, 0x06	; 6
     726:	cf 0e       	add	r12, r31
     728:	d1 1c       	adc	r13, r1
     72a:	49 81       	ldd	r20, Y+1	; 0x01
     72c:	e7 cf       	rjmp	.-50     	; 0x6fc <LCDprogressBar+0x44>
		
		// write character to display
		LCDsendChar(c);
	}

}
     72e:	0f 90       	pop	r0
     730:	df 91       	pop	r29
     732:	cf 91       	pop	r28
     734:	1f 91       	pop	r17
     736:	0f 91       	pop	r16
     738:	ff 90       	pop	r15
     73a:	ef 90       	pop	r14
     73c:	df 90       	pop	r13
     73e:	cf 90       	pop	r12
     740:	08 95       	ret

00000742 <DrawNumber>:
#include "lcd_lib.h"
#include <util/delay.h>


void DrawNumber(uint16_t bil, uint8_t x, uint8_t y,uint8_t _c)
{
     742:	cf 92       	push	r12
     744:	df 92       	push	r13
     746:	ef 92       	push	r14
     748:	ff 92       	push	r15
     74a:	0f 93       	push	r16
     74c:	1f 93       	push	r17
     74e:	cf 93       	push	r28
     750:	df 93       	push	r29
     752:	cd b7       	in	r28, 0x3d	; 61
     754:	de b7       	in	r29, 0x3e	; 62
     756:	6e 97       	sbiw	r28, 0x1e	; 30
     758:	0f b6       	in	r0, 0x3f	; 63
     75a:	f8 94       	cli
     75c:	de bf       	out	0x3e, r29	; 62
     75e:	0f be       	out	0x3f, r0	; 63
     760:	cd bf       	out	0x3d, r28	; 61
     762:	d8 2e       	mov	r13, r24
     764:	c9 2e       	mov	r12, r25
     766:	06 2f       	mov	r16, r22
     768:	f4 2e       	mov	r15, r20
     76a:	e2 2e       	mov	r14, r18
	uint8_t pjg;
	char lcdchar[30];
			LCDGotoXY(x,y);
     76c:	64 2f       	mov	r22, r20
     76e:	80 2f       	mov	r24, r16
     770:	0e 94 6a 02 	call	0x4d4	; 0x4d4 <LCDGotoXY>
			if (_c!=0)
     774:	ee 20       	and	r14, r14
     776:	71 f0       	breq	.+28     	; 0x794 <DrawNumber+0x52>
     778:	11 e0       	ldi	r17, 0x01	; 1
			{
				
				for (uint8_t i=1; i<=_c; i++)
     77a:	e1 16       	cp	r14, r17
     77c:	38 f0       	brcs	.+14     	; 0x78c <DrawNumber+0x4a>
				{
					LCDstring((uint8_t*)" ",1);
     77e:	61 e0       	ldi	r22, 0x01	; 1
     780:	80 e4       	ldi	r24, 0x40	; 64
     782:	91 e0       	ldi	r25, 0x01	; 1
     784:	0e 94 4b 02 	call	0x496	; 0x496 <LCDstring>
	char lcdchar[30];
			LCDGotoXY(x,y);
			if (_c!=0)
			{
				
				for (uint8_t i=1; i<=_c; i++)
     788:	1f 5f       	subi	r17, 0xFF	; 255
     78a:	f7 cf       	rjmp	.-18     	; 0x77a <DrawNumber+0x38>
				{
					LCDstring((uint8_t*)" ",1);
				}
				LCDGotoXY(x,y);
     78c:	6f 2d       	mov	r22, r15
     78e:	80 2f       	mov	r24, r16
     790:	0e 94 6a 02 	call	0x4d4	; 0x4d4 <LCDGotoXY>
			}
			snprintf(lcdchar,15, "%d",bil);
     794:	cf 92       	push	r12
     796:	df 92       	push	r13
     798:	88 e5       	ldi	r24, 0x58	; 88
     79a:	91 e0       	ldi	r25, 0x01	; 1
     79c:	9f 93       	push	r25
     79e:	8f 93       	push	r24
     7a0:	1f 92       	push	r1
     7a2:	8f e0       	ldi	r24, 0x0F	; 15
     7a4:	8f 93       	push	r24
     7a6:	8e 01       	movw	r16, r28
     7a8:	0f 5f       	subi	r16, 0xFF	; 255
     7aa:	1f 4f       	sbci	r17, 0xFF	; 255
     7ac:	1f 93       	push	r17
     7ae:	0f 93       	push	r16
     7b0:	0e 94 ef 05 	call	0xbde	; 0xbde <snprintf>
			pjg = strlen(lcdchar);
     7b4:	f8 01       	movw	r30, r16
     7b6:	01 90       	ld	r0, Z+
     7b8:	00 20       	and	r0, r0
     7ba:	e9 f7       	brne	.-6      	; 0x7b6 <DrawNumber+0x74>
     7bc:	bf 01       	movw	r22, r30
     7be:	61 50       	subi	r22, 0x01	; 1
     7c0:	71 09       	sbc	r23, r1
     7c2:	60 1b       	sub	r22, r16
     7c4:	71 0b       	sbc	r23, r17
			LCDstring((uint8_t*)lcdchar,pjg);
     7c6:	c8 01       	movw	r24, r16
     7c8:	0e 94 4b 02 	call	0x496	; 0x496 <LCDstring>
     7cc:	0f b6       	in	r0, 0x3f	; 63
     7ce:	f8 94       	cli
     7d0:	de bf       	out	0x3e, r29	; 62
     7d2:	0f be       	out	0x3f, r0	; 63
     7d4:	cd bf       	out	0x3d, r28	; 61
	
}
     7d6:	6e 96       	adiw	r28, 0x1e	; 30
     7d8:	0f b6       	in	r0, 0x3f	; 63
     7da:	f8 94       	cli
     7dc:	de bf       	out	0x3e, r29	; 62
     7de:	0f be       	out	0x3f, r0	; 63
     7e0:	cd bf       	out	0x3d, r28	; 61
     7e2:	df 91       	pop	r29
     7e4:	cf 91       	pop	r28
     7e6:	1f 91       	pop	r17
     7e8:	0f 91       	pop	r16
     7ea:	ff 90       	pop	r15
     7ec:	ef 90       	pop	r14
     7ee:	df 90       	pop	r13
     7f0:	cf 90       	pop	r12
     7f2:	08 95       	ret

000007f4 <DrawNumberCPos>:
///
void DrawNumberCPos(uint16_t bil, uint8_t _c)
{
     7f4:	ef 92       	push	r14
     7f6:	ff 92       	push	r15
     7f8:	0f 93       	push	r16
     7fa:	1f 93       	push	r17
     7fc:	cf 93       	push	r28
     7fe:	df 93       	push	r29
     800:	cd b7       	in	r28, 0x3d	; 61
     802:	de b7       	in	r29, 0x3e	; 62
     804:	6e 97       	sbiw	r28, 0x1e	; 30
     806:	0f b6       	in	r0, 0x3f	; 63
     808:	f8 94       	cli
     80a:	de bf       	out	0x3e, r29	; 62
     80c:	0f be       	out	0x3f, r0	; 63
     80e:	cd bf       	out	0x3d, r28	; 61
     810:	f8 2e       	mov	r15, r24
     812:	e9 2e       	mov	r14, r25
     814:	06 2f       	mov	r16, r22
	uint8_t pjg;
	char lcdchar[30];
	if (_c!=0)
     816:	61 11       	cpse	r22, r1
     818:	2e c0       	rjmp	.+92     	; 0x876 <__stack+0x17>
		for (uint8_t i=1; i<=_c; i++)
		{
			LCDstring((uint8_t*)" ",1);
		}
	}
	snprintf(lcdchar,15, "%d",bil);
     81a:	ef 92       	push	r14
     81c:	ff 92       	push	r15
     81e:	88 e5       	ldi	r24, 0x58	; 88
     820:	91 e0       	ldi	r25, 0x01	; 1
     822:	9f 93       	push	r25
     824:	8f 93       	push	r24
     826:	1f 92       	push	r1
     828:	8f e0       	ldi	r24, 0x0F	; 15
     82a:	8f 93       	push	r24
     82c:	8e 01       	movw	r16, r28
     82e:	0f 5f       	subi	r16, 0xFF	; 255
     830:	1f 4f       	sbci	r17, 0xFF	; 255
     832:	1f 93       	push	r17
     834:	0f 93       	push	r16
     836:	0e 94 ef 05 	call	0xbde	; 0xbde <snprintf>
	pjg = strlen(lcdchar);
     83a:	f8 01       	movw	r30, r16
     83c:	01 90       	ld	r0, Z+
     83e:	00 20       	and	r0, r0
     840:	e9 f7       	brne	.-6      	; 0x83c <DrawNumberCPos+0x48>
     842:	bf 01       	movw	r22, r30
     844:	61 50       	subi	r22, 0x01	; 1
     846:	71 09       	sbc	r23, r1
     848:	60 1b       	sub	r22, r16
     84a:	71 0b       	sbc	r23, r17
	LCDstring((uint8_t*)lcdchar,pjg);
     84c:	c8 01       	movw	r24, r16
     84e:	0e 94 4b 02 	call	0x496	; 0x496 <LCDstring>
	
}
     852:	0f b6       	in	r0, 0x3f	; 63
     854:	f8 94       	cli
     856:	de bf       	out	0x3e, r29	; 62
     858:	0f be       	out	0x3f, r0	; 63
     85a:	cd bf       	out	0x3d, r28	; 61
     85c:	6e 96       	adiw	r28, 0x1e	; 30
     85e:	0f b6       	in	r0, 0x3f	; 63
     860:	f8 94       	cli
     862:	de bf       	out	0x3e, r29	; 62
     864:	0f be       	out	0x3f, r0	; 63
     866:	cd bf       	out	0x3d, r28	; 61
     868:	df 91       	pop	r29
     86a:	cf 91       	pop	r28
     86c:	1f 91       	pop	r17
     86e:	0f 91       	pop	r16
     870:	ff 90       	pop	r15
     872:	ef 90       	pop	r14
     874:	08 95       	ret
///
void DrawNumberCPos(uint16_t bil, uint8_t _c)
{
	uint8_t pjg;
	char lcdchar[30];
	if (_c!=0)
     876:	11 e0       	ldi	r17, 0x01	; 1
	{
		
		for (uint8_t i=1; i<=_c; i++)
     878:	01 17       	cp	r16, r17
     87a:	78 f2       	brcs	.-98     	; 0x81a <DrawNumberCPos+0x26>
		{
			LCDstring((uint8_t*)" ",1);
     87c:	61 e0       	ldi	r22, 0x01	; 1
     87e:	80 e4       	ldi	r24, 0x40	; 64
     880:	91 e0       	ldi	r25, 0x01	; 1
     882:	0e 94 4b 02 	call	0x496	; 0x496 <LCDstring>
	uint8_t pjg;
	char lcdchar[30];
	if (_c!=0)
	{
		
		for (uint8_t i=1; i<=_c; i++)
     886:	1f 5f       	subi	r17, 0xFF	; 255
     888:	f7 cf       	rjmp	.-18     	; 0x878 <__stack+0x19>

0000088a <LcdDelete>:
	
}

///Clears block with whitespace replacing
void LcdDelete(uint8_t xawal, uint8_t xakhir, uint8_t _Y)
{
     88a:	cf 93       	push	r28
     88c:	df 93       	push	r29
     88e:	c8 2f       	mov	r28, r24
     890:	d6 2f       	mov	r29, r22
	LCDGotoXY(xawal,_Y);
     892:	64 2f       	mov	r22, r20
     894:	0e 94 6a 02 	call	0x4d4	; 0x4d4 <LCDGotoXY>
	for (uint8_t i=xawal;i<=xakhir;i++)
     898:	dc 17       	cp	r29, r28
     89a:	38 f0       	brcs	.+14     	; 0x8aa <LcdDelete+0x20>
	{
		LCDstring((uint8_t*)" ",1);
     89c:	61 e0       	ldi	r22, 0x01	; 1
     89e:	80 e4       	ldi	r24, 0x40	; 64
     8a0:	91 e0       	ldi	r25, 0x01	; 1
     8a2:	0e 94 4b 02 	call	0x496	; 0x496 <LCDstring>

///Clears block with whitespace replacing
void LcdDelete(uint8_t xawal, uint8_t xakhir, uint8_t _Y)
{
	LCDGotoXY(xawal,_Y);
	for (uint8_t i=xawal;i<=xakhir;i++)
     8a6:	cf 5f       	subi	r28, 0xFF	; 255
     8a8:	f7 cf       	rjmp	.-18     	; 0x898 <LcdDelete+0xe>
	{
		LCDstring((uint8_t*)" ",1);
	}
}
     8aa:	df 91       	pop	r29
     8ac:	cf 91       	pop	r28
     8ae:	08 95       	ret

000008b0 <ButtonEnter>:


/**  return is it true that particular button is pressed (Enter, Back, Next, Prev)*/
uint8_t ButtonEnter()
{
	return isclear(BUTTON_ENTER_PIN,BUTTON_ENTER_DOWN);
     8b0:	83 b3       	in	r24, 0x13	; 19
     8b2:	86 95       	lsr	r24
     8b4:	81 70       	andi	r24, 0x01	; 1
}
     8b6:	91 e0       	ldi	r25, 0x01	; 1
     8b8:	89 27       	eor	r24, r25
     8ba:	08 95       	ret

000008bc <ButtonBack>:
uint8_t ButtonBack()
{
	return isclear(BUTTON_BACK_PIN,BUTTON_BACK_DOWN);
     8bc:	83 b3       	in	r24, 0x13	; 19
     8be:	82 fb       	bst	r24, 2
     8c0:	88 27       	eor	r24, r24
     8c2:	80 f9       	bld	r24, 0
}
     8c4:	91 e0       	ldi	r25, 0x01	; 1
     8c6:	89 27       	eor	r24, r25
     8c8:	08 95       	ret

000008ca <ButtonNext>:
uint8_t ButtonNext()
{
	return isclear(BUTTON_NEXT_PIN,BUTTON_NEXT_DOWN);
     8ca:	83 b3       	in	r24, 0x13	; 19
     8cc:	83 fb       	bst	r24, 3
     8ce:	88 27       	eor	r24, r24
     8d0:	80 f9       	bld	r24, 0
}
     8d2:	91 e0       	ldi	r25, 0x01	; 1
     8d4:	89 27       	eor	r24, r25
     8d6:	08 95       	ret

000008d8 <ButtonPrev>:
uint8_t ButtonPrev()
{
	return isclear(BUTTON_PREV_PIN,BUTTON_PREV_DOWN);
     8d8:	83 b3       	in	r24, 0x13	; 19
     8da:	80 95       	com	r24
}
     8dc:	81 70       	andi	r24, 0x01	; 1
     8de:	08 95       	ret

000008e0 <ButtonWait>:


void ButtonWait()
{
	/** Let the system pause and wait for any button to be pressed */
	while (isset(BUTTON_ENTER_PIN,BUTTON_ENTER_DOWN) && isset(BUTTON_BACK_PIN,BUTTON_BACK_DOWN) && isset(BUTTON_NEXT_PIN,BUTTON_NEXT_DOWN) && isset(BUTTON_PREV_PIN,BUTTON_PREV_DOWN));
     8e0:	99 9b       	sbis	0x13, 1	; 19
     8e2:	06 c0       	rjmp	.+12     	; 0x8f0 <ButtonWait+0x10>
     8e4:	9a 9b       	sbis	0x13, 2	; 19
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <ButtonWait+0x10>
     8e8:	9b 9b       	sbis	0x13, 3	; 19
     8ea:	02 c0       	rjmp	.+4      	; 0x8f0 <ButtonWait+0x10>
     8ec:	98 99       	sbic	0x13, 0	; 19
     8ee:	f8 cf       	rjmp	.-16     	; 0x8e0 <ButtonWait>
     8f0:	08 95       	ret

000008f2 <ButtonIsPressed>:
}
uint8_t ButtonIsPressed()
{
	/** Check if there are (any) button pressed */
	return (isclear(BUTTON_ENTER_PIN,BUTTON_ENTER_DOWN) || isclear(BUTTON_BACK_PIN,BUTTON_BACK_DOWN) || isclear(BUTTON_NEXT_PIN,BUTTON_NEXT_DOWN) || isclear(BUTTON_PREV_PIN,BUTTON_PREV_DOWN));
     8f2:	99 9b       	sbis	0x13, 1	; 19
     8f4:	08 c0       	rjmp	.+16     	; 0x906 <ButtonIsPressed+0x14>
     8f6:	9a 9b       	sbis	0x13, 2	; 19
     8f8:	06 c0       	rjmp	.+12     	; 0x906 <ButtonIsPressed+0x14>
     8fa:	9b 9b       	sbis	0x13, 3	; 19
     8fc:	04 c0       	rjmp	.+8      	; 0x906 <ButtonIsPressed+0x14>
     8fe:	83 b3       	in	r24, 0x13	; 19
     900:	80 95       	com	r24
     902:	81 70       	andi	r24, 0x01	; 1
     904:	08 95       	ret
     906:	81 e0       	ldi	r24, 0x01	; 1
}
     908:	08 95       	ret

0000090a <ButtonIsNotPressed>:
uint8_t ButtonIsNotPressed()
{
	/** Check if all button is currently not pressed */
	return (isset(BUTTON_ENTER_PIN,BUTTON_ENTER_DOWN) || isset(BUTTON_BACK_PIN,BUTTON_BACK_DOWN) || isset(BUTTON_NEXT_PIN,BUTTON_NEXT_DOWN) || isset(BUTTON_PREV_PIN,BUTTON_PREV_DOWN));
     90a:	99 99       	sbic	0x13, 1	; 19
     90c:	07 c0       	rjmp	.+14     	; 0x91c <ButtonIsNotPressed+0x12>
     90e:	9a 99       	sbic	0x13, 2	; 19
     910:	05 c0       	rjmp	.+10     	; 0x91c <ButtonIsNotPressed+0x12>
     912:	9b 99       	sbic	0x13, 3	; 19
     914:	03 c0       	rjmp	.+6      	; 0x91c <ButtonIsNotPressed+0x12>
     916:	83 b3       	in	r24, 0x13	; 19
     918:	81 70       	andi	r24, 0x01	; 1
     91a:	08 95       	ret
     91c:	81 e0       	ldi	r24, 0x01	; 1
}
     91e:	08 95       	ret

00000920 <ButtonRead>:
uint8_t ButtonRead()
{
	/** Wait for any button to be pressed and return which button is pressed */
	uint8_t output;
	ButtonWait();
     920:	0e 94 70 04 	call	0x8e0	; 0x8e0 <ButtonWait>
	if (isclear(BUTTON_ENTER_PIN,BUTTON_ENTER_DOWN))
     924:	99 9b       	sbis	0x13, 1	; 19
     926:	06 c0       	rjmp	.+12     	; 0x934 <ButtonRead+0x14>
		output = BUTTON_ENTER_DOWN;
	else if (isclear(BUTTON_BACK_PIN,BUTTON_BACK_DOWN))
     928:	9a 9b       	sbis	0x13, 2	; 19
     92a:	06 c0       	rjmp	.+12     	; 0x938 <ButtonRead+0x18>
		output = BUTTON_BACK_DOWN;
	else if (isclear(BUTTON_NEXT_PIN,BUTTON_NEXT_DOWN))
     92c:	9b 99       	sbic	0x13, 3	; 19
     92e:	06 c0       	rjmp	.+12     	; 0x93c <ButtonRead+0x1c>
		output = BUTTON_NEXT_DOWN;
     930:	83 e0       	ldi	r24, 0x03	; 3
     932:	05 c0       	rjmp	.+10     	; 0x93e <ButtonRead+0x1e>
{
	/** Wait for any button to be pressed and return which button is pressed */
	uint8_t output;
	ButtonWait();
	if (isclear(BUTTON_ENTER_PIN,BUTTON_ENTER_DOWN))
		output = BUTTON_ENTER_DOWN;
     934:	81 e0       	ldi	r24, 0x01	; 1
     936:	03 c0       	rjmp	.+6      	; 0x93e <ButtonRead+0x1e>
	else if (isclear(BUTTON_BACK_PIN,BUTTON_BACK_DOWN))
		output = BUTTON_BACK_DOWN;
     938:	82 e0       	ldi	r24, 0x02	; 2
     93a:	01 c0       	rjmp	.+2      	; 0x93e <ButtonRead+0x1e>
	else if (isclear(BUTTON_NEXT_PIN,BUTTON_NEXT_DOWN))
		output = BUTTON_NEXT_DOWN;
	else 
		output = BUTTON_PREV_DOWN;
     93c:	80 e0       	ldi	r24, 0x00	; 0
     93e:	2f e7       	ldi	r18, 0x7F	; 127
     940:	39 ea       	ldi	r19, 0xA9	; 169
     942:	93 e0       	ldi	r25, 0x03	; 3
     944:	21 50       	subi	r18, 0x01	; 1
     946:	30 40       	sbci	r19, 0x00	; 0
     948:	90 40       	sbci	r25, 0x00	; 0
     94a:	e1 f7       	brne	.-8      	; 0x944 <ButtonRead+0x24>
     94c:	00 c0       	rjmp	.+0      	; 0x94e <ButtonRead+0x2e>
     94e:	00 00       	nop
	_delay_ms(100);
	return (output);
}
     950:	08 95       	ret

00000952 <CharMenuInit>:

void CharMenuInit()
{
	MenuMain[0].cursorNum = 1;
     952:	81 e0       	ldi	r24, 0x01	; 1
     954:	90 e0       	ldi	r25, 0x00	; 0
     956:	90 93 5d 01 	sts	0x015D, r25
     95a:	80 93 5c 01 	sts	0x015C, r24
	MenuMain[0].menuText = (uint8_t*)"";//main menu text will not be used
     95e:	81 e4       	ldi	r24, 0x41	; 65
     960:	91 e0       	ldi	r25, 0x01	; 1
     962:	90 93 5f 01 	sts	0x015F, r25
     966:	80 93 5e 01 	sts	0x015E, r24
	MenuMain[0].numOfChildren = MAIN_MENU_NUMBER_OF_CHILDREN;
     96a:	82 e0       	ldi	r24, 0x02	; 2
     96c:	80 93 60 01 	sts	0x0160, r24
	MenuMain[0].parentIndex = 0;
     970:	10 92 61 01 	sts	0x0161, r1
	MenuMain[0].actFunction = 0;
     974:	10 92 63 01 	sts	0x0163, r1
     978:	10 92 62 01 	sts	0x0162, r1
	
	BUTTON_ENTER_PORT |= (1<<BUTTON_ENTER_DOWN);
     97c:	a9 9a       	sbi	0x15, 1	; 21
	BUTTON_BACK_PORT |= (1<<BUTTON_BACK_DOWN);
     97e:	aa 9a       	sbi	0x15, 2	; 21
	BUTTON_NEXT_PORT |= (1<<BUTTON_NEXT_DOWN);
     980:	ab 9a       	sbi	0x15, 3	; 21
	BUTTON_PREV_PORT |= (1<<BUTTON_PREV_DOWN);
     982:	a8 9a       	sbi	0x15, 0	; 21
     984:	08 95       	ret

00000986 <CharMenuRelink>:
}

void CharMenuRelink()
{
     986:	e2 e6       	ldi	r30, 0x62	; 98
     988:	f1 e0       	ldi	r31, 0x01	; 1
	uint8_t x=0;
	for (x=0;x<TOTAL_MENU;x++)
	{
		MenuMain[x].actFunction = 0;
     98a:	11 82       	std	Z+1, r1	; 0x01
     98c:	10 82       	st	Z, r1
     98e:	38 96       	adiw	r30, 0x08	; 8
}

void CharMenuRelink()
{
	uint8_t x=0;
	for (x=0;x<TOTAL_MENU;x++)
     990:	81 e0       	ldi	r24, 0x01	; 1
     992:	ea 3b       	cpi	r30, 0xBA	; 186
     994:	f8 07       	cpc	r31, r24
     996:	c9 f7       	brne	.-14     	; 0x98a <CharMenuRelink+0x4>
	{
		MenuMain[x].actFunction = 0;
	}
}
     998:	08 95       	ret

0000099a <GetCursor>:
	}
}

uint8_t GetCursor(uint16_t numstate)
{
	if (numstate>=20)
     99a:	84 31       	cpi	r24, 0x14	; 20
     99c:	91 05       	cpc	r25, r1
     99e:	20 f0       	brcs	.+8      	; 0x9a8 <GetCursor+0xe>
		return (numstate%10);
     9a0:	6a e0       	ldi	r22, 0x0A	; 10
     9a2:	70 e0       	ldi	r23, 0x00	; 0
     9a4:	0e 94 c7 05 	call	0xb8e	; 0xb8e <__udivmodhi4>
	return numstate;
}
     9a8:	08 95       	ret

000009aa <GetParent>:
uint8_t GetParent(uint16_t numstate)
{
	if (numstate<20)
     9aa:	84 31       	cpi	r24, 0x14	; 20
     9ac:	91 05       	cpc	r25, r1
     9ae:	30 f0       	brcs	.+12     	; 0x9bc <GetParent+0x12>
		return 0;///its parent is menu
	return (numstate/10);
     9b0:	6a e0       	ldi	r22, 0x0A	; 10
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	0e 94 c7 05 	call	0xb8e	; 0xb8e <__udivmodhi4>
     9b8:	86 2f       	mov	r24, r22
     9ba:	08 95       	ret
	return numstate;
}
uint8_t GetParent(uint16_t numstate)
{
	if (numstate<20)
		return 0;///its parent is menu
     9bc:	80 e0       	ldi	r24, 0x00	; 0
	return (numstate/10);
}
     9be:	08 95       	ret

000009c0 <GetChild>:
uint8_t GetChild(uint8_t parent, uint8_t childid)
{
	return (parent*10)+childid;
}
     9c0:	9a e0       	ldi	r25, 0x0A	; 10
     9c2:	89 9f       	mul	r24, r25
     9c4:	60 0d       	add	r22, r0
     9c6:	11 24       	eor	r1, r1
     9c8:	86 2f       	mov	r24, r22
     9ca:	08 95       	ret

000009cc <ReStrainScroll>:

void ReStrainScroll()
{
	if (gCursor<1)
     9cc:	90 91 b7 01 	lds	r25, 0x01B7
     9d0:	80 91 b6 01 	lds	r24, 0x01B6
     9d4:	99 23       	and	r25, r25
     9d6:	19 f0       	breq	.+6      	; 0x9de <ReStrainScroll+0x12>
	{
		gCursor = gScrollMax;
	}
	else if (gCursor>gScrollMax)
     9d8:	89 17       	cp	r24, r25
     9da:	18 f4       	brcc	.+6      	; 0x9e2 <ReStrainScroll+0x16>
	{
		gCursor = 1;
     9dc:	81 e0       	ldi	r24, 0x01	; 1
     9de:	80 93 b7 01 	sts	0x01B7, r24
     9e2:	08 95       	ret

000009e4 <PrintScroll>:
	}
}

void PrintScroll(uint8_t sNum, uint8_t sMax)
{
     9e4:	cf 93       	push	r28
     9e6:	df 93       	push	r29
     9e8:	c8 2f       	mov	r28, r24
     9ea:	d6 2f       	mov	r29, r22
	LCDGotoXY(0,1);
     9ec:	61 e0       	ldi	r22, 0x01	; 1
     9ee:	80 e0       	ldi	r24, 0x00	; 0
     9f0:	0e 94 6a 02 	call	0x4d4	; 0x4d4 <LCDGotoXY>
	LCDprogressBar(sNum, sMax,16);
     9f4:	40 e1       	ldi	r20, 0x10	; 16
     9f6:	6d 2f       	mov	r22, r29
     9f8:	8c 2f       	mov	r24, r28
		else
		{
			LCDstring((uint8_t*)"-",1);
		}
	}
}
     9fa:	df 91       	pop	r29
     9fc:	cf 91       	pop	r28
}

void PrintScroll(uint8_t sNum, uint8_t sMax)
{
	LCDGotoXY(0,1);
	LCDprogressBar(sNum, sMax,16);
     9fe:	0c 94 5c 03 	jmp	0x6b8	; 0x6b8 <LCDprogressBar>

00000a02 <CharMenuDraw>:
		MenuMain[x].actFunction = 0;
	}
}

void CharMenuDraw()
{
     a02:	1f 93       	push	r17
     a04:	cf 93       	push	r28
     a06:	df 93       	push	r29
	if (MenuMain[gState].actFunction!=0)
     a08:	80 91 b4 01 	lds	r24, 0x01B4
     a0c:	90 91 b5 01 	lds	r25, 0x01B5
     a10:	fc 01       	movw	r30, r24
     a12:	23 e0       	ldi	r18, 0x03	; 3
     a14:	ee 0f       	add	r30, r30
     a16:	ff 1f       	adc	r31, r31
     a18:	2a 95       	dec	r18
     a1a:	e1 f7       	brne	.-8      	; 0xa14 <CharMenuDraw+0x12>
     a1c:	e4 5a       	subi	r30, 0xA4	; 164
     a1e:	fe 4f       	sbci	r31, 0xFE	; 254
     a20:	06 80       	ldd	r0, Z+6	; 0x06
     a22:	f7 81       	ldd	r31, Z+7	; 0x07
     a24:	e0 2d       	mov	r30, r0
     a26:	30 97       	sbiw	r30, 0x00	; 0
     a28:	11 f0       	breq	.+4      	; 0xa2e <CharMenuDraw+0x2c>
	{
		MenuMain[gState].actFunction();
     a2a:	09 95       	icall
     a2c:	66 c0       	rjmp	.+204    	; 0xafa <CharMenuDraw+0xf8>
	uint8_t x=0;
	///Catch the current menu and cursor, x start from 1 (not main menu)
	for (x=1;x<TOTAL_MENU;x++)
	{
		///current state is gState, find children of MenuMain[gState]
		if ((MenuMain[x].parentIndex == gState) && ((MenuMain[x].cursorNum) == gCursor))
     a2e:	20 91 b7 01 	lds	r18, 0x01B7
     a32:	30 e0       	ldi	r19, 0x00	; 0
     a34:	e9 e6       	ldi	r30, 0x69	; 105
     a36:	f1 e0       	ldi	r31, 0x01	; 1
     a38:	c1 e0       	ldi	r28, 0x01	; 1
     a3a:	d0 e0       	ldi	r29, 0x00	; 0
     a3c:	1c 2f       	mov	r17, r28
     a3e:	40 81       	ld	r20, Z
     a40:	50 e0       	ldi	r21, 0x00	; 0
     a42:	48 17       	cp	r20, r24
     a44:	59 07       	cpc	r21, r25
     a46:	09 f0       	breq	.+2      	; 0xa4a <CharMenuDraw+0x48>
     a48:	6d c0       	rjmp	.+218    	; 0xb24 <CharMenuDraw+0x122>
     a4a:	df 01       	movw	r26, r30
     a4c:	15 97       	sbiw	r26, 0x05	; 5
     a4e:	4d 91       	ld	r20, X+
     a50:	5c 91       	ld	r21, X
     a52:	42 17       	cp	r20, r18
     a54:	53 07       	cpc	r21, r19
     a56:	09 f0       	breq	.+2      	; 0xa5a <CharMenuDraw+0x58>
     a58:	65 c0       	rjmp	.+202    	; 0xb24 <CharMenuDraw+0x122>
		{
			///Draw the current menu at current cursor
			LCDGotoXY(0,0);
     a5a:	60 e0       	ldi	r22, 0x00	; 0
     a5c:	80 e0       	ldi	r24, 0x00	; 0
     a5e:	0e 94 6a 02 	call	0x4d4	; 0x4d4 <LCDGotoXY>
			LCDstring((uint8_t*)(MenuMain[x].menuText),16);
     a62:	93 e0       	ldi	r25, 0x03	; 3
     a64:	cc 0f       	add	r28, r28
     a66:	dd 1f       	adc	r29, r29
     a68:	9a 95       	dec	r25
     a6a:	e1 f7       	brne	.-8      	; 0xa64 <CharMenuDraw+0x62>
     a6c:	c4 5a       	subi	r28, 0xA4	; 164
     a6e:	de 4f       	sbci	r29, 0xFE	; 254
     a70:	60 e1       	ldi	r22, 0x10	; 16
     a72:	8a 81       	ldd	r24, Y+2	; 0x02
     a74:	9b 81       	ldd	r25, Y+3	; 0x03
     a76:	0e 94 4b 02 	call	0x496	; 0x496 <LCDstring>
			PrintScroll(gCursor,MenuMain[MenuMain[x].parentIndex].numOfChildren);
     a7a:	ed 81       	ldd	r30, Y+5	; 0x05
     a7c:	88 e0       	ldi	r24, 0x08	; 8
     a7e:	e8 9f       	mul	r30, r24
     a80:	f0 01       	movw	r30, r0
     a82:	11 24       	eor	r1, r1
     a84:	e4 5a       	subi	r30, 0xA4	; 164
     a86:	fe 4f       	sbci	r31, 0xFE	; 254
     a88:	64 81       	ldd	r22, Z+4	; 0x04
     a8a:	80 91 b7 01 	lds	r24, 0x01B7
     a8e:	0e 94 f2 04 	call	0x9e4	; 0x9e4 <PrintScroll>
			
			///wait signal
			uint8_t action = ButtonRead();
     a92:	0e 94 90 04 	call	0x920	; 0x920 <ButtonRead>
			if (action == BUTTON_ENTER_DOWN)
     a96:	81 30       	cpi	r24, 0x01	; 1
     a98:	39 f4       	brne	.+14     	; 0xaa8 <CharMenuDraw+0xa6>
			{
				gState = x;
     a9a:	21 2f       	mov	r18, r17
     a9c:	30 e0       	ldi	r19, 0x00	; 0
     a9e:	30 93 b5 01 	sts	0x01B5, r19
     aa2:	20 93 b4 01 	sts	0x01B4, r18
     aa6:	24 c0       	rjmp	.+72     	; 0xaf0 <CharMenuDraw+0xee>
						//~ break;
					//~ }
				//~ }
				//~ _delay_ms(1000);
			}
			else if (action == BUTTON_NEXT_DOWN)
     aa8:	83 30       	cpi	r24, 0x03	; 3
     aaa:	89 f4       	brne	.+34     	; 0xace <CharMenuDraw+0xcc>
			{
				gCursor++;
     aac:	80 91 b7 01 	lds	r24, 0x01B7
     ab0:	8f 5f       	subi	r24, 0xFF	; 255
     ab2:	80 93 b7 01 	sts	0x01B7, r24
				if (gCursor>MenuMain[MenuMain[x].parentIndex].numOfChildren)
     ab6:	ed 81       	ldd	r30, Y+5	; 0x05
     ab8:	98 e0       	ldi	r25, 0x08	; 8
     aba:	e9 9f       	mul	r30, r25
     abc:	f0 01       	movw	r30, r0
     abe:	11 24       	eor	r1, r1
     ac0:	e4 5a       	subi	r30, 0xA4	; 164
     ac2:	fe 4f       	sbci	r31, 0xFE	; 254
     ac4:	94 81       	ldd	r25, Z+4	; 0x04
     ac6:	98 17       	cp	r25, r24
     ac8:	98 f5       	brcc	.+102    	; 0xb30 <CharMenuDraw+0x12e>
					gCursor = 1;
     aca:	81 e0       	ldi	r24, 0x01	; 1
     acc:	11 c0       	rjmp	.+34     	; 0xaf0 <CharMenuDraw+0xee>
			}
			else if (action == BUTTON_PREV_DOWN)
     ace:	81 11       	cpse	r24, r1
     ad0:	12 c0       	rjmp	.+36     	; 0xaf6 <CharMenuDraw+0xf4>
			{
				gCursor--;
     ad2:	80 91 b7 01 	lds	r24, 0x01B7
     ad6:	81 50       	subi	r24, 0x01	; 1
     ad8:	80 93 b7 01 	sts	0x01B7, r24
				if (gCursor<1)
     adc:	81 11       	cpse	r24, r1
     ade:	28 c0       	rjmp	.+80     	; 0xb30 <CharMenuDraw+0x12e>
					gCursor = MenuMain[MenuMain[x].parentIndex].numOfChildren;
     ae0:	ed 81       	ldd	r30, Y+5	; 0x05
     ae2:	88 e0       	ldi	r24, 0x08	; 8
     ae4:	e8 9f       	mul	r30, r24
     ae6:	f0 01       	movw	r30, r0
     ae8:	11 24       	eor	r1, r1
     aea:	e4 5a       	subi	r30, 0xA4	; 164
     aec:	fe 4f       	sbci	r31, 0xFE	; 254
     aee:	84 81       	ldd	r24, Z+4	; 0x04
     af0:	80 93 b7 01 	sts	0x01B7, r24
     af4:	1d c0       	rjmp	.+58     	; 0xb30 <CharMenuDraw+0x12e>
			}
			else if (action == BUTTON_BACK_DOWN)
     af6:	82 30       	cpi	r24, 0x02	; 2
     af8:	d9 f4       	brne	.+54     	; 0xb30 <CharMenuDraw+0x12e>
			{
				gCursor = MenuMain[gState].cursorNum;
     afa:	e0 91 b4 01 	lds	r30, 0x01B4
     afe:	f0 91 b5 01 	lds	r31, 0x01B5
     b02:	83 e0       	ldi	r24, 0x03	; 3
     b04:	ee 0f       	add	r30, r30
     b06:	ff 1f       	adc	r31, r31
     b08:	8a 95       	dec	r24
     b0a:	e1 f7       	brne	.-8      	; 0xb04 <CharMenuDraw+0x102>
     b0c:	e4 5a       	subi	r30, 0xA4	; 164
     b0e:	fe 4f       	sbci	r31, 0xFE	; 254
     b10:	80 81       	ld	r24, Z
     b12:	80 93 b7 01 	sts	0x01B7, r24
				gState = MenuMain[gState].parentIndex;
     b16:	85 81       	ldd	r24, Z+5	; 0x05
     b18:	90 e0       	ldi	r25, 0x00	; 0
     b1a:	90 93 b5 01 	sts	0x01B5, r25
     b1e:	80 93 b4 01 	sts	0x01B4, r24
     b22:	06 c0       	rjmp	.+12     	; 0xb30 <CharMenuDraw+0x12e>
     b24:	38 96       	adiw	r30, 0x08	; 8
     b26:	21 96       	adiw	r28, 0x01	; 1
		gState = MenuMain[gState].parentIndex;
		return;
	}
	uint8_t x=0;
	///Catch the current menu and cursor, x start from 1 (not main menu)
	for (x=1;x<TOTAL_MENU;x++)
     b28:	cb 30       	cpi	r28, 0x0B	; 11
     b2a:	d1 05       	cpc	r29, r1
     b2c:	09 f0       	breq	.+2      	; 0xb30 <CharMenuDraw+0x12e>
     b2e:	86 cf       	rjmp	.-244    	; 0xa3c <CharMenuDraw+0x3a>
				//~ return;
			}
			return;
		}
	}
}
     b30:	df 91       	pop	r29
     b32:	cf 91       	pop	r28
     b34:	1f 91       	pop	r17
     b36:	08 95       	ret

00000b38 <main>:
void DrinkCola_cb(void);
void DrinkPepsi_cb(void);

int main(void)
{
	LCDinit();
     b38:	0e 94 b5 02 	call	0x56a	; 0x56a <LCDinit>
	LCDGotoXY(0,0);
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	80 e0       	ldi	r24, 0x00	; 0
     b40:	0e 94 6a 02 	call	0x4d4	; 0x4d4 <LCDGotoXY>
	LCDstring("HAHA",4);
     b44:	64 e0       	ldi	r22, 0x04	; 4
     b46:	83 e5       	ldi	r24, 0x53	; 83
     b48:	91 e0       	ldi	r25, 0x01	; 1
     b4a:	0e 94 4b 02 	call	0x496	; 0x496 <LCDstring>
	LCDGotoXY(0,1);
     b4e:	61 e0       	ldi	r22, 0x01	; 1
     b50:	80 e0       	ldi	r24, 0x00	; 0
     b52:	0e 94 6a 02 	call	0x4d4	; 0x4d4 <LCDGotoXY>
	LCDprogressBar(7,40,16);
     b56:	40 e1       	ldi	r20, 0x10	; 16
     b58:	68 e2       	ldi	r22, 0x28	; 40
     b5a:	87 e0       	ldi	r24, 0x07	; 7
     b5c:	0e 94 5c 03 	call	0x6b8	; 0x6b8 <LCDprogressBar>
     b60:	2f ef       	ldi	r18, 0xFF	; 255
     b62:	8d e3       	ldi	r24, 0x3D	; 61
     b64:	99 e4       	ldi	r25, 0x49	; 73
     b66:	21 50       	subi	r18, 0x01	; 1
     b68:	80 40       	sbci	r24, 0x00	; 0
     b6a:	90 40       	sbci	r25, 0x00	; 0
     b6c:	e1 f7       	brne	.-8      	; 0xb66 <main+0x2e>
     b6e:	00 c0       	rjmp	.+0      	; 0xb70 <main+0x38>
     b70:	00 00       	nop
	_delay_ms(2000);
	Init();
     b72:	0e 94 23 01 	call	0x246	; 0x246 <Init>
	CharMenuInit();
     b76:	0e 94 a9 04 	call	0x952	; 0x952 <CharMenuInit>
	gCursor = 1;
     b7a:	81 e0       	ldi	r24, 0x01	; 1
     b7c:	80 93 b7 01 	sts	0x01B7, r24
	gState = STATE_MENU;
     b80:	10 92 b5 01 	sts	0x01B5, r1
     b84:	10 92 b4 01 	sts	0x01B4, r1
	
	while(1)
	{
		CharMenuDraw();
     b88:	0e 94 01 05 	call	0xa02	; 0xa02 <CharMenuDraw>
     b8c:	fd cf       	rjmp	.-6      	; 0xb88 <main+0x50>

00000b8e <__udivmodhi4>:
     b8e:	aa 1b       	sub	r26, r26
     b90:	bb 1b       	sub	r27, r27
     b92:	51 e1       	ldi	r21, 0x11	; 17
     b94:	07 c0       	rjmp	.+14     	; 0xba4 <__udivmodhi4_ep>

00000b96 <__udivmodhi4_loop>:
     b96:	aa 1f       	adc	r26, r26
     b98:	bb 1f       	adc	r27, r27
     b9a:	a6 17       	cp	r26, r22
     b9c:	b7 07       	cpc	r27, r23
     b9e:	10 f0       	brcs	.+4      	; 0xba4 <__udivmodhi4_ep>
     ba0:	a6 1b       	sub	r26, r22
     ba2:	b7 0b       	sbc	r27, r23

00000ba4 <__udivmodhi4_ep>:
     ba4:	88 1f       	adc	r24, r24
     ba6:	99 1f       	adc	r25, r25
     ba8:	5a 95       	dec	r21
     baa:	a9 f7       	brne	.-22     	; 0xb96 <__udivmodhi4_loop>
     bac:	80 95       	com	r24
     bae:	90 95       	com	r25
     bb0:	bc 01       	movw	r22, r24
     bb2:	cd 01       	movw	r24, r26
     bb4:	08 95       	ret

00000bb6 <__divmodhi4>:
     bb6:	97 fb       	bst	r25, 7
     bb8:	07 2e       	mov	r0, r23
     bba:	16 f4       	brtc	.+4      	; 0xbc0 <__divmodhi4+0xa>
     bbc:	00 94       	com	r0
     bbe:	07 d0       	rcall	.+14     	; 0xbce <__divmodhi4_neg1>
     bc0:	77 fd       	sbrc	r23, 7
     bc2:	09 d0       	rcall	.+18     	; 0xbd6 <__divmodhi4_neg2>
     bc4:	0e 94 c7 05 	call	0xb8e	; 0xb8e <__udivmodhi4>
     bc8:	07 fc       	sbrc	r0, 7
     bca:	05 d0       	rcall	.+10     	; 0xbd6 <__divmodhi4_neg2>
     bcc:	3e f4       	brtc	.+14     	; 0xbdc <__divmodhi4_exit>

00000bce <__divmodhi4_neg1>:
     bce:	90 95       	com	r25
     bd0:	81 95       	neg	r24
     bd2:	9f 4f       	sbci	r25, 0xFF	; 255
     bd4:	08 95       	ret

00000bd6 <__divmodhi4_neg2>:
     bd6:	70 95       	com	r23
     bd8:	61 95       	neg	r22
     bda:	7f 4f       	sbci	r23, 0xFF	; 255

00000bdc <__divmodhi4_exit>:
     bdc:	08 95       	ret

00000bde <snprintf>:
     bde:	ae e0       	ldi	r26, 0x0E	; 14
     be0:	b0 e0       	ldi	r27, 0x00	; 0
     be2:	e5 ef       	ldi	r30, 0xF5	; 245
     be4:	f5 e0       	ldi	r31, 0x05	; 5
     be6:	0c 94 a5 08 	jmp	0x114a	; 0x114a <__prologue_saves__+0x1c>
     bea:	0d 89       	ldd	r16, Y+21	; 0x15
     bec:	1e 89       	ldd	r17, Y+22	; 0x16
     bee:	8f 89       	ldd	r24, Y+23	; 0x17
     bf0:	98 8d       	ldd	r25, Y+24	; 0x18
     bf2:	26 e0       	ldi	r18, 0x06	; 6
     bf4:	2c 83       	std	Y+4, r18	; 0x04
     bf6:	1a 83       	std	Y+2, r17	; 0x02
     bf8:	09 83       	std	Y+1, r16	; 0x01
     bfa:	97 ff       	sbrs	r25, 7
     bfc:	02 c0       	rjmp	.+4      	; 0xc02 <snprintf+0x24>
     bfe:	80 e0       	ldi	r24, 0x00	; 0
     c00:	90 e8       	ldi	r25, 0x80	; 128
     c02:	01 97       	sbiw	r24, 0x01	; 1
     c04:	9e 83       	std	Y+6, r25	; 0x06
     c06:	8d 83       	std	Y+5, r24	; 0x05
     c08:	ae 01       	movw	r20, r28
     c0a:	45 5e       	subi	r20, 0xE5	; 229
     c0c:	5f 4f       	sbci	r21, 0xFF	; 255
     c0e:	69 8d       	ldd	r22, Y+25	; 0x19
     c10:	7a 8d       	ldd	r23, Y+26	; 0x1a
     c12:	ce 01       	movw	r24, r28
     c14:	01 96       	adiw	r24, 0x01	; 1
     c16:	0e 94 1f 06 	call	0xc3e	; 0xc3e <vfprintf>
     c1a:	4d 81       	ldd	r20, Y+5	; 0x05
     c1c:	5e 81       	ldd	r21, Y+6	; 0x06
     c1e:	57 fd       	sbrc	r21, 7
     c20:	0a c0       	rjmp	.+20     	; 0xc36 <snprintf+0x58>
     c22:	2f 81       	ldd	r18, Y+7	; 0x07
     c24:	38 85       	ldd	r19, Y+8	; 0x08
     c26:	42 17       	cp	r20, r18
     c28:	53 07       	cpc	r21, r19
     c2a:	0c f4       	brge	.+2      	; 0xc2e <snprintf+0x50>
     c2c:	9a 01       	movw	r18, r20
     c2e:	f8 01       	movw	r30, r16
     c30:	e2 0f       	add	r30, r18
     c32:	f3 1f       	adc	r31, r19
     c34:	10 82       	st	Z, r1
     c36:	2e 96       	adiw	r28, 0x0e	; 14
     c38:	e4 e0       	ldi	r30, 0x04	; 4
     c3a:	0c 94 c1 08 	jmp	0x1182	; 0x1182 <__epilogue_restores__+0x1c>

00000c3e <vfprintf>:
     c3e:	ac e0       	ldi	r26, 0x0C	; 12
     c40:	b0 e0       	ldi	r27, 0x00	; 0
     c42:	e5 e2       	ldi	r30, 0x25	; 37
     c44:	f6 e0       	ldi	r31, 0x06	; 6
     c46:	0c 94 97 08 	jmp	0x112e	; 0x112e <__prologue_saves__>
     c4a:	7c 01       	movw	r14, r24
     c4c:	6b 01       	movw	r12, r22
     c4e:	8a 01       	movw	r16, r20
     c50:	fc 01       	movw	r30, r24
     c52:	17 82       	std	Z+7, r1	; 0x07
     c54:	16 82       	std	Z+6, r1	; 0x06
     c56:	83 81       	ldd	r24, Z+3	; 0x03
     c58:	81 ff       	sbrs	r24, 1
     c5a:	bd c1       	rjmp	.+890    	; 0xfd6 <vfprintf+0x398>
     c5c:	ce 01       	movw	r24, r28
     c5e:	01 96       	adiw	r24, 0x01	; 1
     c60:	4c 01       	movw	r8, r24
     c62:	f7 01       	movw	r30, r14
     c64:	93 81       	ldd	r25, Z+3	; 0x03
     c66:	f6 01       	movw	r30, r12
     c68:	93 fd       	sbrc	r25, 3
     c6a:	85 91       	lpm	r24, Z+
     c6c:	93 ff       	sbrs	r25, 3
     c6e:	81 91       	ld	r24, Z+
     c70:	6f 01       	movw	r12, r30
     c72:	88 23       	and	r24, r24
     c74:	09 f4       	brne	.+2      	; 0xc78 <vfprintf+0x3a>
     c76:	ab c1       	rjmp	.+854    	; 0xfce <vfprintf+0x390>
     c78:	85 32       	cpi	r24, 0x25	; 37
     c7a:	39 f4       	brne	.+14     	; 0xc8a <vfprintf+0x4c>
     c7c:	93 fd       	sbrc	r25, 3
     c7e:	85 91       	lpm	r24, Z+
     c80:	93 ff       	sbrs	r25, 3
     c82:	81 91       	ld	r24, Z+
     c84:	6f 01       	movw	r12, r30
     c86:	85 32       	cpi	r24, 0x25	; 37
     c88:	29 f4       	brne	.+10     	; 0xc94 <vfprintf+0x56>
     c8a:	b7 01       	movw	r22, r14
     c8c:	90 e0       	ldi	r25, 0x00	; 0
     c8e:	0e 94 07 08 	call	0x100e	; 0x100e <fputc>
     c92:	e7 cf       	rjmp	.-50     	; 0xc62 <vfprintf+0x24>
     c94:	51 2c       	mov	r5, r1
     c96:	31 2c       	mov	r3, r1
     c98:	20 e0       	ldi	r18, 0x00	; 0
     c9a:	20 32       	cpi	r18, 0x20	; 32
     c9c:	a0 f4       	brcc	.+40     	; 0xcc6 <vfprintf+0x88>
     c9e:	8b 32       	cpi	r24, 0x2B	; 43
     ca0:	69 f0       	breq	.+26     	; 0xcbc <vfprintf+0x7e>
     ca2:	30 f4       	brcc	.+12     	; 0xcb0 <vfprintf+0x72>
     ca4:	80 32       	cpi	r24, 0x20	; 32
     ca6:	59 f0       	breq	.+22     	; 0xcbe <vfprintf+0x80>
     ca8:	83 32       	cpi	r24, 0x23	; 35
     caa:	69 f4       	brne	.+26     	; 0xcc6 <vfprintf+0x88>
     cac:	20 61       	ori	r18, 0x10	; 16
     cae:	2c c0       	rjmp	.+88     	; 0xd08 <vfprintf+0xca>
     cb0:	8d 32       	cpi	r24, 0x2D	; 45
     cb2:	39 f0       	breq	.+14     	; 0xcc2 <vfprintf+0x84>
     cb4:	80 33       	cpi	r24, 0x30	; 48
     cb6:	39 f4       	brne	.+14     	; 0xcc6 <vfprintf+0x88>
     cb8:	21 60       	ori	r18, 0x01	; 1
     cba:	26 c0       	rjmp	.+76     	; 0xd08 <vfprintf+0xca>
     cbc:	22 60       	ori	r18, 0x02	; 2
     cbe:	24 60       	ori	r18, 0x04	; 4
     cc0:	23 c0       	rjmp	.+70     	; 0xd08 <vfprintf+0xca>
     cc2:	28 60       	ori	r18, 0x08	; 8
     cc4:	21 c0       	rjmp	.+66     	; 0xd08 <vfprintf+0xca>
     cc6:	27 fd       	sbrc	r18, 7
     cc8:	27 c0       	rjmp	.+78     	; 0xd18 <vfprintf+0xda>
     cca:	30 ed       	ldi	r19, 0xD0	; 208
     ccc:	38 0f       	add	r19, r24
     cce:	3a 30       	cpi	r19, 0x0A	; 10
     cd0:	78 f4       	brcc	.+30     	; 0xcf0 <vfprintf+0xb2>
     cd2:	26 ff       	sbrs	r18, 6
     cd4:	06 c0       	rjmp	.+12     	; 0xce2 <vfprintf+0xa4>
     cd6:	fa e0       	ldi	r31, 0x0A	; 10
     cd8:	5f 9e       	mul	r5, r31
     cda:	30 0d       	add	r19, r0
     cdc:	11 24       	eor	r1, r1
     cde:	53 2e       	mov	r5, r19
     ce0:	13 c0       	rjmp	.+38     	; 0xd08 <vfprintf+0xca>
     ce2:	8a e0       	ldi	r24, 0x0A	; 10
     ce4:	38 9e       	mul	r3, r24
     ce6:	30 0d       	add	r19, r0
     ce8:	11 24       	eor	r1, r1
     cea:	33 2e       	mov	r3, r19
     cec:	20 62       	ori	r18, 0x20	; 32
     cee:	0c c0       	rjmp	.+24     	; 0xd08 <vfprintf+0xca>
     cf0:	8e 32       	cpi	r24, 0x2E	; 46
     cf2:	21 f4       	brne	.+8      	; 0xcfc <vfprintf+0xbe>
     cf4:	26 fd       	sbrc	r18, 6
     cf6:	6b c1       	rjmp	.+726    	; 0xfce <vfprintf+0x390>
     cf8:	20 64       	ori	r18, 0x40	; 64
     cfa:	06 c0       	rjmp	.+12     	; 0xd08 <vfprintf+0xca>
     cfc:	8c 36       	cpi	r24, 0x6C	; 108
     cfe:	11 f4       	brne	.+4      	; 0xd04 <vfprintf+0xc6>
     d00:	20 68       	ori	r18, 0x80	; 128
     d02:	02 c0       	rjmp	.+4      	; 0xd08 <vfprintf+0xca>
     d04:	88 36       	cpi	r24, 0x68	; 104
     d06:	41 f4       	brne	.+16     	; 0xd18 <vfprintf+0xda>
     d08:	f6 01       	movw	r30, r12
     d0a:	93 fd       	sbrc	r25, 3
     d0c:	85 91       	lpm	r24, Z+
     d0e:	93 ff       	sbrs	r25, 3
     d10:	81 91       	ld	r24, Z+
     d12:	6f 01       	movw	r12, r30
     d14:	81 11       	cpse	r24, r1
     d16:	c1 cf       	rjmp	.-126    	; 0xc9a <vfprintf+0x5c>
     d18:	98 2f       	mov	r25, r24
     d1a:	9f 7d       	andi	r25, 0xDF	; 223
     d1c:	95 54       	subi	r25, 0x45	; 69
     d1e:	93 30       	cpi	r25, 0x03	; 3
     d20:	28 f4       	brcc	.+10     	; 0xd2c <vfprintf+0xee>
     d22:	0c 5f       	subi	r16, 0xFC	; 252
     d24:	1f 4f       	sbci	r17, 0xFF	; 255
     d26:	ff e3       	ldi	r31, 0x3F	; 63
     d28:	f9 83       	std	Y+1, r31	; 0x01
     d2a:	0d c0       	rjmp	.+26     	; 0xd46 <vfprintf+0x108>
     d2c:	83 36       	cpi	r24, 0x63	; 99
     d2e:	31 f0       	breq	.+12     	; 0xd3c <vfprintf+0xfe>
     d30:	83 37       	cpi	r24, 0x73	; 115
     d32:	71 f0       	breq	.+28     	; 0xd50 <vfprintf+0x112>
     d34:	83 35       	cpi	r24, 0x53	; 83
     d36:	09 f0       	breq	.+2      	; 0xd3a <vfprintf+0xfc>
     d38:	5b c0       	rjmp	.+182    	; 0xdf0 <vfprintf+0x1b2>
     d3a:	22 c0       	rjmp	.+68     	; 0xd80 <vfprintf+0x142>
     d3c:	f8 01       	movw	r30, r16
     d3e:	80 81       	ld	r24, Z
     d40:	89 83       	std	Y+1, r24	; 0x01
     d42:	0e 5f       	subi	r16, 0xFE	; 254
     d44:	1f 4f       	sbci	r17, 0xFF	; 255
     d46:	44 24       	eor	r4, r4
     d48:	43 94       	inc	r4
     d4a:	51 2c       	mov	r5, r1
     d4c:	54 01       	movw	r10, r8
     d4e:	15 c0       	rjmp	.+42     	; 0xd7a <vfprintf+0x13c>
     d50:	38 01       	movw	r6, r16
     d52:	f2 e0       	ldi	r31, 0x02	; 2
     d54:	6f 0e       	add	r6, r31
     d56:	71 1c       	adc	r7, r1
     d58:	f8 01       	movw	r30, r16
     d5a:	a0 80       	ld	r10, Z
     d5c:	b1 80       	ldd	r11, Z+1	; 0x01
     d5e:	26 ff       	sbrs	r18, 6
     d60:	03 c0       	rjmp	.+6      	; 0xd68 <vfprintf+0x12a>
     d62:	65 2d       	mov	r22, r5
     d64:	70 e0       	ldi	r23, 0x00	; 0
     d66:	02 c0       	rjmp	.+4      	; 0xd6c <vfprintf+0x12e>
     d68:	6f ef       	ldi	r22, 0xFF	; 255
     d6a:	7f ef       	ldi	r23, 0xFF	; 255
     d6c:	c5 01       	movw	r24, r10
     d6e:	2c 87       	std	Y+12, r18	; 0x0c
     d70:	0e 94 fc 07 	call	0xff8	; 0xff8 <strnlen>
     d74:	2c 01       	movw	r4, r24
     d76:	83 01       	movw	r16, r6
     d78:	2c 85       	ldd	r18, Y+12	; 0x0c
     d7a:	2f 77       	andi	r18, 0x7F	; 127
     d7c:	22 2e       	mov	r2, r18
     d7e:	17 c0       	rjmp	.+46     	; 0xdae <vfprintf+0x170>
     d80:	38 01       	movw	r6, r16
     d82:	f2 e0       	ldi	r31, 0x02	; 2
     d84:	6f 0e       	add	r6, r31
     d86:	71 1c       	adc	r7, r1
     d88:	f8 01       	movw	r30, r16
     d8a:	a0 80       	ld	r10, Z
     d8c:	b1 80       	ldd	r11, Z+1	; 0x01
     d8e:	26 ff       	sbrs	r18, 6
     d90:	03 c0       	rjmp	.+6      	; 0xd98 <vfprintf+0x15a>
     d92:	65 2d       	mov	r22, r5
     d94:	70 e0       	ldi	r23, 0x00	; 0
     d96:	02 c0       	rjmp	.+4      	; 0xd9c <vfprintf+0x15e>
     d98:	6f ef       	ldi	r22, 0xFF	; 255
     d9a:	7f ef       	ldi	r23, 0xFF	; 255
     d9c:	c5 01       	movw	r24, r10
     d9e:	2c 87       	std	Y+12, r18	; 0x0c
     da0:	0e 94 f1 07 	call	0xfe2	; 0xfe2 <strnlen_P>
     da4:	2c 01       	movw	r4, r24
     da6:	2c 85       	ldd	r18, Y+12	; 0x0c
     da8:	20 68       	ori	r18, 0x80	; 128
     daa:	22 2e       	mov	r2, r18
     dac:	83 01       	movw	r16, r6
     dae:	23 fc       	sbrc	r2, 3
     db0:	1b c0       	rjmp	.+54     	; 0xde8 <vfprintf+0x1aa>
     db2:	83 2d       	mov	r24, r3
     db4:	90 e0       	ldi	r25, 0x00	; 0
     db6:	48 16       	cp	r4, r24
     db8:	59 06       	cpc	r5, r25
     dba:	b0 f4       	brcc	.+44     	; 0xde8 <vfprintf+0x1aa>
     dbc:	b7 01       	movw	r22, r14
     dbe:	80 e2       	ldi	r24, 0x20	; 32
     dc0:	90 e0       	ldi	r25, 0x00	; 0
     dc2:	0e 94 07 08 	call	0x100e	; 0x100e <fputc>
     dc6:	3a 94       	dec	r3
     dc8:	f4 cf       	rjmp	.-24     	; 0xdb2 <vfprintf+0x174>
     dca:	f5 01       	movw	r30, r10
     dcc:	27 fc       	sbrc	r2, 7
     dce:	85 91       	lpm	r24, Z+
     dd0:	27 fe       	sbrs	r2, 7
     dd2:	81 91       	ld	r24, Z+
     dd4:	5f 01       	movw	r10, r30
     dd6:	b7 01       	movw	r22, r14
     dd8:	90 e0       	ldi	r25, 0x00	; 0
     dda:	0e 94 07 08 	call	0x100e	; 0x100e <fputc>
     dde:	31 10       	cpse	r3, r1
     de0:	3a 94       	dec	r3
     de2:	f1 e0       	ldi	r31, 0x01	; 1
     de4:	4f 1a       	sub	r4, r31
     de6:	51 08       	sbc	r5, r1
     de8:	41 14       	cp	r4, r1
     dea:	51 04       	cpc	r5, r1
     dec:	71 f7       	brne	.-36     	; 0xdca <vfprintf+0x18c>
     dee:	e5 c0       	rjmp	.+458    	; 0xfba <vfprintf+0x37c>
     df0:	84 36       	cpi	r24, 0x64	; 100
     df2:	11 f0       	breq	.+4      	; 0xdf8 <vfprintf+0x1ba>
     df4:	89 36       	cpi	r24, 0x69	; 105
     df6:	39 f5       	brne	.+78     	; 0xe46 <vfprintf+0x208>
     df8:	f8 01       	movw	r30, r16
     dfa:	27 ff       	sbrs	r18, 7
     dfc:	07 c0       	rjmp	.+14     	; 0xe0c <vfprintf+0x1ce>
     dfe:	60 81       	ld	r22, Z
     e00:	71 81       	ldd	r23, Z+1	; 0x01
     e02:	82 81       	ldd	r24, Z+2	; 0x02
     e04:	93 81       	ldd	r25, Z+3	; 0x03
     e06:	0c 5f       	subi	r16, 0xFC	; 252
     e08:	1f 4f       	sbci	r17, 0xFF	; 255
     e0a:	08 c0       	rjmp	.+16     	; 0xe1c <vfprintf+0x1de>
     e0c:	60 81       	ld	r22, Z
     e0e:	71 81       	ldd	r23, Z+1	; 0x01
     e10:	88 27       	eor	r24, r24
     e12:	77 fd       	sbrc	r23, 7
     e14:	80 95       	com	r24
     e16:	98 2f       	mov	r25, r24
     e18:	0e 5f       	subi	r16, 0xFE	; 254
     e1a:	1f 4f       	sbci	r17, 0xFF	; 255
     e1c:	2f 76       	andi	r18, 0x6F	; 111
     e1e:	b2 2e       	mov	r11, r18
     e20:	97 ff       	sbrs	r25, 7
     e22:	09 c0       	rjmp	.+18     	; 0xe36 <vfprintf+0x1f8>
     e24:	90 95       	com	r25
     e26:	80 95       	com	r24
     e28:	70 95       	com	r23
     e2a:	61 95       	neg	r22
     e2c:	7f 4f       	sbci	r23, 0xFF	; 255
     e2e:	8f 4f       	sbci	r24, 0xFF	; 255
     e30:	9f 4f       	sbci	r25, 0xFF	; 255
     e32:	20 68       	ori	r18, 0x80	; 128
     e34:	b2 2e       	mov	r11, r18
     e36:	2a e0       	ldi	r18, 0x0A	; 10
     e38:	30 e0       	ldi	r19, 0x00	; 0
     e3a:	a4 01       	movw	r20, r8
     e3c:	0e 94 39 08 	call	0x1072	; 0x1072 <__ultoa_invert>
     e40:	a8 2e       	mov	r10, r24
     e42:	a8 18       	sub	r10, r8
     e44:	44 c0       	rjmp	.+136    	; 0xece <vfprintf+0x290>
     e46:	85 37       	cpi	r24, 0x75	; 117
     e48:	29 f4       	brne	.+10     	; 0xe54 <vfprintf+0x216>
     e4a:	2f 7e       	andi	r18, 0xEF	; 239
     e4c:	b2 2e       	mov	r11, r18
     e4e:	2a e0       	ldi	r18, 0x0A	; 10
     e50:	30 e0       	ldi	r19, 0x00	; 0
     e52:	25 c0       	rjmp	.+74     	; 0xe9e <vfprintf+0x260>
     e54:	f2 2f       	mov	r31, r18
     e56:	f9 7f       	andi	r31, 0xF9	; 249
     e58:	bf 2e       	mov	r11, r31
     e5a:	8f 36       	cpi	r24, 0x6F	; 111
     e5c:	c1 f0       	breq	.+48     	; 0xe8e <vfprintf+0x250>
     e5e:	18 f4       	brcc	.+6      	; 0xe66 <vfprintf+0x228>
     e60:	88 35       	cpi	r24, 0x58	; 88
     e62:	79 f0       	breq	.+30     	; 0xe82 <vfprintf+0x244>
     e64:	b4 c0       	rjmp	.+360    	; 0xfce <vfprintf+0x390>
     e66:	80 37       	cpi	r24, 0x70	; 112
     e68:	19 f0       	breq	.+6      	; 0xe70 <vfprintf+0x232>
     e6a:	88 37       	cpi	r24, 0x78	; 120
     e6c:	21 f0       	breq	.+8      	; 0xe76 <vfprintf+0x238>
     e6e:	af c0       	rjmp	.+350    	; 0xfce <vfprintf+0x390>
     e70:	2f 2f       	mov	r18, r31
     e72:	20 61       	ori	r18, 0x10	; 16
     e74:	b2 2e       	mov	r11, r18
     e76:	b4 fe       	sbrs	r11, 4
     e78:	0d c0       	rjmp	.+26     	; 0xe94 <vfprintf+0x256>
     e7a:	8b 2d       	mov	r24, r11
     e7c:	84 60       	ori	r24, 0x04	; 4
     e7e:	b8 2e       	mov	r11, r24
     e80:	09 c0       	rjmp	.+18     	; 0xe94 <vfprintf+0x256>
     e82:	24 ff       	sbrs	r18, 4
     e84:	0a c0       	rjmp	.+20     	; 0xe9a <vfprintf+0x25c>
     e86:	9f 2f       	mov	r25, r31
     e88:	96 60       	ori	r25, 0x06	; 6
     e8a:	b9 2e       	mov	r11, r25
     e8c:	06 c0       	rjmp	.+12     	; 0xe9a <vfprintf+0x25c>
     e8e:	28 e0       	ldi	r18, 0x08	; 8
     e90:	30 e0       	ldi	r19, 0x00	; 0
     e92:	05 c0       	rjmp	.+10     	; 0xe9e <vfprintf+0x260>
     e94:	20 e1       	ldi	r18, 0x10	; 16
     e96:	30 e0       	ldi	r19, 0x00	; 0
     e98:	02 c0       	rjmp	.+4      	; 0xe9e <vfprintf+0x260>
     e9a:	20 e1       	ldi	r18, 0x10	; 16
     e9c:	32 e0       	ldi	r19, 0x02	; 2
     e9e:	f8 01       	movw	r30, r16
     ea0:	b7 fe       	sbrs	r11, 7
     ea2:	07 c0       	rjmp	.+14     	; 0xeb2 <vfprintf+0x274>
     ea4:	60 81       	ld	r22, Z
     ea6:	71 81       	ldd	r23, Z+1	; 0x01
     ea8:	82 81       	ldd	r24, Z+2	; 0x02
     eaa:	93 81       	ldd	r25, Z+3	; 0x03
     eac:	0c 5f       	subi	r16, 0xFC	; 252
     eae:	1f 4f       	sbci	r17, 0xFF	; 255
     eb0:	06 c0       	rjmp	.+12     	; 0xebe <vfprintf+0x280>
     eb2:	60 81       	ld	r22, Z
     eb4:	71 81       	ldd	r23, Z+1	; 0x01
     eb6:	80 e0       	ldi	r24, 0x00	; 0
     eb8:	90 e0       	ldi	r25, 0x00	; 0
     eba:	0e 5f       	subi	r16, 0xFE	; 254
     ebc:	1f 4f       	sbci	r17, 0xFF	; 255
     ebe:	a4 01       	movw	r20, r8
     ec0:	0e 94 39 08 	call	0x1072	; 0x1072 <__ultoa_invert>
     ec4:	a8 2e       	mov	r10, r24
     ec6:	a8 18       	sub	r10, r8
     ec8:	fb 2d       	mov	r31, r11
     eca:	ff 77       	andi	r31, 0x7F	; 127
     ecc:	bf 2e       	mov	r11, r31
     ece:	b6 fe       	sbrs	r11, 6
     ed0:	0b c0       	rjmp	.+22     	; 0xee8 <vfprintf+0x2aa>
     ed2:	2b 2d       	mov	r18, r11
     ed4:	2e 7f       	andi	r18, 0xFE	; 254
     ed6:	a5 14       	cp	r10, r5
     ed8:	50 f4       	brcc	.+20     	; 0xeee <vfprintf+0x2b0>
     eda:	b4 fe       	sbrs	r11, 4
     edc:	0a c0       	rjmp	.+20     	; 0xef2 <vfprintf+0x2b4>
     ede:	b2 fc       	sbrc	r11, 2
     ee0:	08 c0       	rjmp	.+16     	; 0xef2 <vfprintf+0x2b4>
     ee2:	2b 2d       	mov	r18, r11
     ee4:	2e 7e       	andi	r18, 0xEE	; 238
     ee6:	05 c0       	rjmp	.+10     	; 0xef2 <vfprintf+0x2b4>
     ee8:	7a 2c       	mov	r7, r10
     eea:	2b 2d       	mov	r18, r11
     eec:	03 c0       	rjmp	.+6      	; 0xef4 <vfprintf+0x2b6>
     eee:	7a 2c       	mov	r7, r10
     ef0:	01 c0       	rjmp	.+2      	; 0xef4 <vfprintf+0x2b6>
     ef2:	75 2c       	mov	r7, r5
     ef4:	24 ff       	sbrs	r18, 4
     ef6:	0d c0       	rjmp	.+26     	; 0xf12 <vfprintf+0x2d4>
     ef8:	fe 01       	movw	r30, r28
     efa:	ea 0d       	add	r30, r10
     efc:	f1 1d       	adc	r31, r1
     efe:	80 81       	ld	r24, Z
     f00:	80 33       	cpi	r24, 0x30	; 48
     f02:	11 f4       	brne	.+4      	; 0xf08 <vfprintf+0x2ca>
     f04:	29 7e       	andi	r18, 0xE9	; 233
     f06:	09 c0       	rjmp	.+18     	; 0xf1a <vfprintf+0x2dc>
     f08:	22 ff       	sbrs	r18, 2
     f0a:	06 c0       	rjmp	.+12     	; 0xf18 <vfprintf+0x2da>
     f0c:	73 94       	inc	r7
     f0e:	73 94       	inc	r7
     f10:	04 c0       	rjmp	.+8      	; 0xf1a <vfprintf+0x2dc>
     f12:	82 2f       	mov	r24, r18
     f14:	86 78       	andi	r24, 0x86	; 134
     f16:	09 f0       	breq	.+2      	; 0xf1a <vfprintf+0x2dc>
     f18:	73 94       	inc	r7
     f1a:	23 fd       	sbrc	r18, 3
     f1c:	13 c0       	rjmp	.+38     	; 0xf44 <vfprintf+0x306>
     f1e:	20 ff       	sbrs	r18, 0
     f20:	06 c0       	rjmp	.+12     	; 0xf2e <vfprintf+0x2f0>
     f22:	5a 2c       	mov	r5, r10
     f24:	73 14       	cp	r7, r3
     f26:	18 f4       	brcc	.+6      	; 0xf2e <vfprintf+0x2f0>
     f28:	53 0c       	add	r5, r3
     f2a:	57 18       	sub	r5, r7
     f2c:	73 2c       	mov	r7, r3
     f2e:	73 14       	cp	r7, r3
     f30:	68 f4       	brcc	.+26     	; 0xf4c <vfprintf+0x30e>
     f32:	b7 01       	movw	r22, r14
     f34:	80 e2       	ldi	r24, 0x20	; 32
     f36:	90 e0       	ldi	r25, 0x00	; 0
     f38:	2c 87       	std	Y+12, r18	; 0x0c
     f3a:	0e 94 07 08 	call	0x100e	; 0x100e <fputc>
     f3e:	73 94       	inc	r7
     f40:	2c 85       	ldd	r18, Y+12	; 0x0c
     f42:	f5 cf       	rjmp	.-22     	; 0xf2e <vfprintf+0x2f0>
     f44:	73 14       	cp	r7, r3
     f46:	10 f4       	brcc	.+4      	; 0xf4c <vfprintf+0x30e>
     f48:	37 18       	sub	r3, r7
     f4a:	01 c0       	rjmp	.+2      	; 0xf4e <vfprintf+0x310>
     f4c:	31 2c       	mov	r3, r1
     f4e:	24 ff       	sbrs	r18, 4
     f50:	12 c0       	rjmp	.+36     	; 0xf76 <vfprintf+0x338>
     f52:	b7 01       	movw	r22, r14
     f54:	80 e3       	ldi	r24, 0x30	; 48
     f56:	90 e0       	ldi	r25, 0x00	; 0
     f58:	2c 87       	std	Y+12, r18	; 0x0c
     f5a:	0e 94 07 08 	call	0x100e	; 0x100e <fputc>
     f5e:	2c 85       	ldd	r18, Y+12	; 0x0c
     f60:	22 ff       	sbrs	r18, 2
     f62:	17 c0       	rjmp	.+46     	; 0xf92 <vfprintf+0x354>
     f64:	21 ff       	sbrs	r18, 1
     f66:	03 c0       	rjmp	.+6      	; 0xf6e <vfprintf+0x330>
     f68:	88 e5       	ldi	r24, 0x58	; 88
     f6a:	90 e0       	ldi	r25, 0x00	; 0
     f6c:	02 c0       	rjmp	.+4      	; 0xf72 <vfprintf+0x334>
     f6e:	88 e7       	ldi	r24, 0x78	; 120
     f70:	90 e0       	ldi	r25, 0x00	; 0
     f72:	b7 01       	movw	r22, r14
     f74:	0c c0       	rjmp	.+24     	; 0xf8e <vfprintf+0x350>
     f76:	82 2f       	mov	r24, r18
     f78:	86 78       	andi	r24, 0x86	; 134
     f7a:	59 f0       	breq	.+22     	; 0xf92 <vfprintf+0x354>
     f7c:	21 fd       	sbrc	r18, 1
     f7e:	02 c0       	rjmp	.+4      	; 0xf84 <vfprintf+0x346>
     f80:	80 e2       	ldi	r24, 0x20	; 32
     f82:	01 c0       	rjmp	.+2      	; 0xf86 <vfprintf+0x348>
     f84:	8b e2       	ldi	r24, 0x2B	; 43
     f86:	27 fd       	sbrc	r18, 7
     f88:	8d e2       	ldi	r24, 0x2D	; 45
     f8a:	b7 01       	movw	r22, r14
     f8c:	90 e0       	ldi	r25, 0x00	; 0
     f8e:	0e 94 07 08 	call	0x100e	; 0x100e <fputc>
     f92:	a5 14       	cp	r10, r5
     f94:	38 f4       	brcc	.+14     	; 0xfa4 <vfprintf+0x366>
     f96:	b7 01       	movw	r22, r14
     f98:	80 e3       	ldi	r24, 0x30	; 48
     f9a:	90 e0       	ldi	r25, 0x00	; 0
     f9c:	0e 94 07 08 	call	0x100e	; 0x100e <fputc>
     fa0:	5a 94       	dec	r5
     fa2:	f7 cf       	rjmp	.-18     	; 0xf92 <vfprintf+0x354>
     fa4:	aa 94       	dec	r10
     fa6:	f4 01       	movw	r30, r8
     fa8:	ea 0d       	add	r30, r10
     faa:	f1 1d       	adc	r31, r1
     fac:	80 81       	ld	r24, Z
     fae:	b7 01       	movw	r22, r14
     fb0:	90 e0       	ldi	r25, 0x00	; 0
     fb2:	0e 94 07 08 	call	0x100e	; 0x100e <fputc>
     fb6:	a1 10       	cpse	r10, r1
     fb8:	f5 cf       	rjmp	.-22     	; 0xfa4 <vfprintf+0x366>
     fba:	33 20       	and	r3, r3
     fbc:	09 f4       	brne	.+2      	; 0xfc0 <vfprintf+0x382>
     fbe:	51 ce       	rjmp	.-862    	; 0xc62 <vfprintf+0x24>
     fc0:	b7 01       	movw	r22, r14
     fc2:	80 e2       	ldi	r24, 0x20	; 32
     fc4:	90 e0       	ldi	r25, 0x00	; 0
     fc6:	0e 94 07 08 	call	0x100e	; 0x100e <fputc>
     fca:	3a 94       	dec	r3
     fcc:	f6 cf       	rjmp	.-20     	; 0xfba <vfprintf+0x37c>
     fce:	f7 01       	movw	r30, r14
     fd0:	86 81       	ldd	r24, Z+6	; 0x06
     fd2:	97 81       	ldd	r25, Z+7	; 0x07
     fd4:	02 c0       	rjmp	.+4      	; 0xfda <vfprintf+0x39c>
     fd6:	8f ef       	ldi	r24, 0xFF	; 255
     fd8:	9f ef       	ldi	r25, 0xFF	; 255
     fda:	2c 96       	adiw	r28, 0x0c	; 12
     fdc:	e2 e1       	ldi	r30, 0x12	; 18
     fde:	0c 94 b3 08 	jmp	0x1166	; 0x1166 <__epilogue_restores__>

00000fe2 <strnlen_P>:
     fe2:	fc 01       	movw	r30, r24
     fe4:	05 90       	lpm	r0, Z+
     fe6:	61 50       	subi	r22, 0x01	; 1
     fe8:	70 40       	sbci	r23, 0x00	; 0
     fea:	01 10       	cpse	r0, r1
     fec:	d8 f7       	brcc	.-10     	; 0xfe4 <strnlen_P+0x2>
     fee:	80 95       	com	r24
     ff0:	90 95       	com	r25
     ff2:	8e 0f       	add	r24, r30
     ff4:	9f 1f       	adc	r25, r31
     ff6:	08 95       	ret

00000ff8 <strnlen>:
     ff8:	fc 01       	movw	r30, r24
     ffa:	61 50       	subi	r22, 0x01	; 1
     ffc:	70 40       	sbci	r23, 0x00	; 0
     ffe:	01 90       	ld	r0, Z+
    1000:	01 10       	cpse	r0, r1
    1002:	d8 f7       	brcc	.-10     	; 0xffa <strnlen+0x2>
    1004:	80 95       	com	r24
    1006:	90 95       	com	r25
    1008:	8e 0f       	add	r24, r30
    100a:	9f 1f       	adc	r25, r31
    100c:	08 95       	ret

0000100e <fputc>:
    100e:	0f 93       	push	r16
    1010:	1f 93       	push	r17
    1012:	cf 93       	push	r28
    1014:	df 93       	push	r29
    1016:	18 2f       	mov	r17, r24
    1018:	09 2f       	mov	r16, r25
    101a:	eb 01       	movw	r28, r22
    101c:	8b 81       	ldd	r24, Y+3	; 0x03
    101e:	81 fd       	sbrc	r24, 1
    1020:	03 c0       	rjmp	.+6      	; 0x1028 <fputc+0x1a>
    1022:	8f ef       	ldi	r24, 0xFF	; 255
    1024:	9f ef       	ldi	r25, 0xFF	; 255
    1026:	20 c0       	rjmp	.+64     	; 0x1068 <fputc+0x5a>
    1028:	82 ff       	sbrs	r24, 2
    102a:	10 c0       	rjmp	.+32     	; 0x104c <fputc+0x3e>
    102c:	4e 81       	ldd	r20, Y+6	; 0x06
    102e:	5f 81       	ldd	r21, Y+7	; 0x07
    1030:	2c 81       	ldd	r18, Y+4	; 0x04
    1032:	3d 81       	ldd	r19, Y+5	; 0x05
    1034:	42 17       	cp	r20, r18
    1036:	53 07       	cpc	r21, r19
    1038:	7c f4       	brge	.+30     	; 0x1058 <fputc+0x4a>
    103a:	e8 81       	ld	r30, Y
    103c:	f9 81       	ldd	r31, Y+1	; 0x01
    103e:	9f 01       	movw	r18, r30
    1040:	2f 5f       	subi	r18, 0xFF	; 255
    1042:	3f 4f       	sbci	r19, 0xFF	; 255
    1044:	39 83       	std	Y+1, r19	; 0x01
    1046:	28 83       	st	Y, r18
    1048:	10 83       	st	Z, r17
    104a:	06 c0       	rjmp	.+12     	; 0x1058 <fputc+0x4a>
    104c:	e8 85       	ldd	r30, Y+8	; 0x08
    104e:	f9 85       	ldd	r31, Y+9	; 0x09
    1050:	81 2f       	mov	r24, r17
    1052:	09 95       	icall
    1054:	89 2b       	or	r24, r25
    1056:	29 f7       	brne	.-54     	; 0x1022 <fputc+0x14>
    1058:	2e 81       	ldd	r18, Y+6	; 0x06
    105a:	3f 81       	ldd	r19, Y+7	; 0x07
    105c:	2f 5f       	subi	r18, 0xFF	; 255
    105e:	3f 4f       	sbci	r19, 0xFF	; 255
    1060:	3f 83       	std	Y+7, r19	; 0x07
    1062:	2e 83       	std	Y+6, r18	; 0x06
    1064:	81 2f       	mov	r24, r17
    1066:	90 2f       	mov	r25, r16
    1068:	df 91       	pop	r29
    106a:	cf 91       	pop	r28
    106c:	1f 91       	pop	r17
    106e:	0f 91       	pop	r16
    1070:	08 95       	ret

00001072 <__ultoa_invert>:
    1072:	fa 01       	movw	r30, r20
    1074:	aa 27       	eor	r26, r26
    1076:	28 30       	cpi	r18, 0x08	; 8
    1078:	51 f1       	breq	.+84     	; 0x10ce <__ultoa_invert+0x5c>
    107a:	20 31       	cpi	r18, 0x10	; 16
    107c:	81 f1       	breq	.+96     	; 0x10de <__ultoa_invert+0x6c>
    107e:	e8 94       	clt
    1080:	6f 93       	push	r22
    1082:	6e 7f       	andi	r22, 0xFE	; 254
    1084:	6e 5f       	subi	r22, 0xFE	; 254
    1086:	7f 4f       	sbci	r23, 0xFF	; 255
    1088:	8f 4f       	sbci	r24, 0xFF	; 255
    108a:	9f 4f       	sbci	r25, 0xFF	; 255
    108c:	af 4f       	sbci	r26, 0xFF	; 255
    108e:	b1 e0       	ldi	r27, 0x01	; 1
    1090:	3e d0       	rcall	.+124    	; 0x110e <__ultoa_invert+0x9c>
    1092:	b4 e0       	ldi	r27, 0x04	; 4
    1094:	3c d0       	rcall	.+120    	; 0x110e <__ultoa_invert+0x9c>
    1096:	67 0f       	add	r22, r23
    1098:	78 1f       	adc	r23, r24
    109a:	89 1f       	adc	r24, r25
    109c:	9a 1f       	adc	r25, r26
    109e:	a1 1d       	adc	r26, r1
    10a0:	68 0f       	add	r22, r24
    10a2:	79 1f       	adc	r23, r25
    10a4:	8a 1f       	adc	r24, r26
    10a6:	91 1d       	adc	r25, r1
    10a8:	a1 1d       	adc	r26, r1
    10aa:	6a 0f       	add	r22, r26
    10ac:	71 1d       	adc	r23, r1
    10ae:	81 1d       	adc	r24, r1
    10b0:	91 1d       	adc	r25, r1
    10b2:	a1 1d       	adc	r26, r1
    10b4:	20 d0       	rcall	.+64     	; 0x10f6 <__ultoa_invert+0x84>
    10b6:	09 f4       	brne	.+2      	; 0x10ba <__ultoa_invert+0x48>
    10b8:	68 94       	set
    10ba:	3f 91       	pop	r19
    10bc:	2a e0       	ldi	r18, 0x0A	; 10
    10be:	26 9f       	mul	r18, r22
    10c0:	11 24       	eor	r1, r1
    10c2:	30 19       	sub	r19, r0
    10c4:	30 5d       	subi	r19, 0xD0	; 208
    10c6:	31 93       	st	Z+, r19
    10c8:	de f6       	brtc	.-74     	; 0x1080 <__ultoa_invert+0xe>
    10ca:	cf 01       	movw	r24, r30
    10cc:	08 95       	ret
    10ce:	46 2f       	mov	r20, r22
    10d0:	47 70       	andi	r20, 0x07	; 7
    10d2:	40 5d       	subi	r20, 0xD0	; 208
    10d4:	41 93       	st	Z+, r20
    10d6:	b3 e0       	ldi	r27, 0x03	; 3
    10d8:	0f d0       	rcall	.+30     	; 0x10f8 <__ultoa_invert+0x86>
    10da:	c9 f7       	brne	.-14     	; 0x10ce <__ultoa_invert+0x5c>
    10dc:	f6 cf       	rjmp	.-20     	; 0x10ca <__ultoa_invert+0x58>
    10de:	46 2f       	mov	r20, r22
    10e0:	4f 70       	andi	r20, 0x0F	; 15
    10e2:	40 5d       	subi	r20, 0xD0	; 208
    10e4:	4a 33       	cpi	r20, 0x3A	; 58
    10e6:	18 f0       	brcs	.+6      	; 0x10ee <__ultoa_invert+0x7c>
    10e8:	49 5d       	subi	r20, 0xD9	; 217
    10ea:	31 fd       	sbrc	r19, 1
    10ec:	40 52       	subi	r20, 0x20	; 32
    10ee:	41 93       	st	Z+, r20
    10f0:	02 d0       	rcall	.+4      	; 0x10f6 <__ultoa_invert+0x84>
    10f2:	a9 f7       	brne	.-22     	; 0x10de <__ultoa_invert+0x6c>
    10f4:	ea cf       	rjmp	.-44     	; 0x10ca <__ultoa_invert+0x58>
    10f6:	b4 e0       	ldi	r27, 0x04	; 4
    10f8:	a6 95       	lsr	r26
    10fa:	97 95       	ror	r25
    10fc:	87 95       	ror	r24
    10fe:	77 95       	ror	r23
    1100:	67 95       	ror	r22
    1102:	ba 95       	dec	r27
    1104:	c9 f7       	brne	.-14     	; 0x10f8 <__ultoa_invert+0x86>
    1106:	00 97       	sbiw	r24, 0x00	; 0
    1108:	61 05       	cpc	r22, r1
    110a:	71 05       	cpc	r23, r1
    110c:	08 95       	ret
    110e:	9b 01       	movw	r18, r22
    1110:	ac 01       	movw	r20, r24
    1112:	0a 2e       	mov	r0, r26
    1114:	06 94       	lsr	r0
    1116:	57 95       	ror	r21
    1118:	47 95       	ror	r20
    111a:	37 95       	ror	r19
    111c:	27 95       	ror	r18
    111e:	ba 95       	dec	r27
    1120:	c9 f7       	brne	.-14     	; 0x1114 <__ultoa_invert+0xa2>
    1122:	62 0f       	add	r22, r18
    1124:	73 1f       	adc	r23, r19
    1126:	84 1f       	adc	r24, r20
    1128:	95 1f       	adc	r25, r21
    112a:	a0 1d       	adc	r26, r0
    112c:	08 95       	ret

0000112e <__prologue_saves__>:
    112e:	2f 92       	push	r2
    1130:	3f 92       	push	r3
    1132:	4f 92       	push	r4
    1134:	5f 92       	push	r5
    1136:	6f 92       	push	r6
    1138:	7f 92       	push	r7
    113a:	8f 92       	push	r8
    113c:	9f 92       	push	r9
    113e:	af 92       	push	r10
    1140:	bf 92       	push	r11
    1142:	cf 92       	push	r12
    1144:	df 92       	push	r13
    1146:	ef 92       	push	r14
    1148:	ff 92       	push	r15
    114a:	0f 93       	push	r16
    114c:	1f 93       	push	r17
    114e:	cf 93       	push	r28
    1150:	df 93       	push	r29
    1152:	cd b7       	in	r28, 0x3d	; 61
    1154:	de b7       	in	r29, 0x3e	; 62
    1156:	ca 1b       	sub	r28, r26
    1158:	db 0b       	sbc	r29, r27
    115a:	0f b6       	in	r0, 0x3f	; 63
    115c:	f8 94       	cli
    115e:	de bf       	out	0x3e, r29	; 62
    1160:	0f be       	out	0x3f, r0	; 63
    1162:	cd bf       	out	0x3d, r28	; 61
    1164:	09 94       	ijmp

00001166 <__epilogue_restores__>:
    1166:	2a 88       	ldd	r2, Y+18	; 0x12
    1168:	39 88       	ldd	r3, Y+17	; 0x11
    116a:	48 88       	ldd	r4, Y+16	; 0x10
    116c:	5f 84       	ldd	r5, Y+15	; 0x0f
    116e:	6e 84       	ldd	r6, Y+14	; 0x0e
    1170:	7d 84       	ldd	r7, Y+13	; 0x0d
    1172:	8c 84       	ldd	r8, Y+12	; 0x0c
    1174:	9b 84       	ldd	r9, Y+11	; 0x0b
    1176:	aa 84       	ldd	r10, Y+10	; 0x0a
    1178:	b9 84       	ldd	r11, Y+9	; 0x09
    117a:	c8 84       	ldd	r12, Y+8	; 0x08
    117c:	df 80       	ldd	r13, Y+7	; 0x07
    117e:	ee 80       	ldd	r14, Y+6	; 0x06
    1180:	fd 80       	ldd	r15, Y+5	; 0x05
    1182:	0c 81       	ldd	r16, Y+4	; 0x04
    1184:	1b 81       	ldd	r17, Y+3	; 0x03
    1186:	aa 81       	ldd	r26, Y+2	; 0x02
    1188:	b9 81       	ldd	r27, Y+1	; 0x01
    118a:	ce 0f       	add	r28, r30
    118c:	d1 1d       	adc	r29, r1
    118e:	0f b6       	in	r0, 0x3f	; 63
    1190:	f8 94       	cli
    1192:	de bf       	out	0x3e, r29	; 62
    1194:	0f be       	out	0x3f, r0	; 63
    1196:	cd bf       	out	0x3d, r28	; 61
    1198:	ed 01       	movw	r28, r26
    119a:	08 95       	ret

0000119c <_exit>:
    119c:	f8 94       	cli

0000119e <__stop_program>:
    119e:	ff cf       	rjmp	.-2      	; 0x119e <__stop_program>
